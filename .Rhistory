cat("\n")
}
if (!is.null(model.index)) {
model.contrasts <- dds.analysis$Results[[model.index]]
model.comparisons <- dds.analysis$Comparisons$contrasts[[model.index]]
meta <- dds.analysis$meta[[model.index]]
} else stop("Not implemented yet for all models at once")
#'
#' The \code{\link{summary}} function from DESeq2 will only work with DESeqResults objects in R
#'
#' @param dds.analysis Data.frame of DESeq2 results, with the same kind of format as the output of \code{\link{results}}.
#' @param model.index If not \code{NULL} will only print combined summary of 1 model
#'
#' @return The output is a printed summary of the results
#' @export
#'
#'
SummariseModelResults <- function(dds.analysis, model.index = NULL) {
if (!is.null(model.index)) {
model.contrasts <- dds.analysis$Results[[model.index]]
model.comparisons <- dds.analysis$Comparisons$contrasts[[model.index]]
meta <- dds.analysis$meta[[model.index]]
} else stop("Not implemented yet for all models at once")
df.results <- CombineModelContrasts(model.contrasts, model.comparisons)
cat("\n")
# Determine values for summary
notallzero <- sum(df.results$baseMean > 0)
up <- sum(df.results$padj < meta$alpha & df.results$log2FoldChange >
0, na.rm = TRUE)
down <- sum(df.results$padj < meta$alpha & df.results$log2FoldChange <
0, na.rm = TRUE)
filt <- sum(!is.na(df.results$pvalue) & is.na(df.results$padj))
outlier <- sum(df.results$baseMean > 0 & is.na(df.results$pvalue))
ft <- floor(meta$filterThreshold)
# False until we allow IHW
ihw <- FALSE
# Print summary of results
printsig <- function(x) format(x, digits = 2)
cat("out of", notallzero, "with nonzero total read count\n")
cat(paste0("adjusted p-value < ", meta$alpha, "\n"))
cat(paste0("LFC > 0 (up)     : ", up, ", ", printsig(up/notallzero *
100), "% \n"))
cat(paste0("LFC < 0 (down)   : ", down, ", ", printsig(down/notallzero *
100), "% \n"))
cat(paste0("outliers [1]     : ", outlier, ", ", printsig(outlier/notallzero *
100), "% \n"))
if (!ihw)
cat(paste0("low counts [2]   : ", filt, ", ", printsig(filt/notallzero *
100), "% \n"))
if (!ihw)
cat(paste0("(mean count < ", ft, ")\n"))
cat("[1] see 'cooksCutoff' argument of ?results\n")
if (!ihw)
cat("[2] see 'independentFiltering' argument of ?results\n")
if (ihw)
cat("[2] see metadata(res)$ihwResult on hypothesis weighting\n")
cat("\n")
}
CombineModelContrasts <- function(model.contrasts, model.comparisons) {
require(dplyr)
results.nrows <- sapply(model.contrasts, nrow)
df.results <- do.call(rbind, lapply(model.contrasts, as.data.frame)) %>%
mutate(Contrast = rep(names(model.contrasts), times = results.nrows)) %>%
mutate(Name = row.names(.)) %>%
select(Contrast, everything())
return(df.results)
}
SummariseModelResults(dds.analysis, 1)
SummariseModelResults(dds.analysis, 2)
?rejection_plot
dds.analysis$meta[[1]]$filterTheta
dds.analysis$meta[[1]]$filterNumRej
rejection_plot(dds.analysis$meta[[{{model.index}}]],
main = "Indepent filtering rejections",
sub = "by filtered mean expression quantile")
model.index = 1
rejection_plot(dds.analysis$meta[[{{model.index}}]],
main = "Indepent filtering rejections",
sub = "by filtered mean expression quantile")
?filtered_p
plot(dds.analysis$meta[[{{model.index}}]], type="l",
xlab= "Mean expression quantile", ylab="number of rejections")
dds.analysis$meta[[{{model.index}}]]
layout(matrix(c(1,2, 1, 2), 2, 2, byrow = TRUE))
rejection_plot(dds.analysis$meta[[{{model.index}}]]$filterNumRej,
main = "Indepent filtering rejections",
sub = "by filtered mean expression quantile")
plot(dds.analysis$meta[[{{model.index}}]]$filterNumRej, type="l",
xlab= "Mean expression quantile", ylab="number of rejections")
layout(matrix(c(1,2, 1, 2), 2, 2, byrow = TRUE))
# TODO:
#   Make this rejection plot from pre-calculated data
#   Not yet included in dds.analysis
rejection_plot(filtered_p(filter = results.combined.df$baseMean,
test = results.combined.df$pvalue,
theta = seq(from=0,
to=0.5,
by=0.1),
method = 'BH'),
main = "Indepent filtering rejections",
sub = "by filtered mean expression quantile")
# Combine results by row-binding them as data.frames
# Add column indicating name of contrast
results.combined.df <- CombineDESeqResults(model.contrasts,
model.comparisons)
summary.combined <- results.combined.df %>% group_by(Contrast) %>%
summarise(Down.pvalue = sum(pvalue < p.alpha & log2FoldChange < 0, na.rm=T),
Up.pvalue = sum(pvalue < p.alpha & log2FoldChange > 0, na.rm=T),
Down.padj = sum(padj < padj.alpha & log2FoldChange < 0, na.rm=T),
Up.padj = sum(padj < padj.alpha & log2FoldChange > 0, na.rm=T)) %>%
arrange(as.numeric(gsub("Comp", "", gsub("\\.", "", Contrast)))) %>%
mutate(Comparison = unlist(contrasts)) %>%
select(Contrast, Comparison, everything())
count.string <- c("first", "second", "third", "fourth",
"fifth", "sixth", "seventh", "eight", "ninth", "tenth")
# Extract current model results for readability
dds.model <- dds.analysis$Models[[{{model.index}}]]
model.design <- dds.analysis$Comparison$designs[[{{model.index}}]]
model.contrasts <- dds.analysis$Results[[{{model.index}}]]
model.comparisons <- dds.analysis$Comparisons$contrasts[[{{model.index}}]]
meta <- dds.analysis$meta[[{{model.index}}]]
p.alpha <- meta$alpha
padj.alpha <- meta$alpha
# Combine results by row-binding them as data.frames
# Add column indicating name of contrast
results.combined.df <- CombineDESeqResults(model.contrasts,
model.comparisons)
summary.combined <- results.combined.df %>% group_by(Contrast) %>%
summarise(Down.pvalue = sum(pvalue < p.alpha & log2FoldChange < 0, na.rm=T),
Up.pvalue = sum(pvalue < p.alpha & log2FoldChange > 0, na.rm=T),
Down.padj = sum(padj < padj.alpha & log2FoldChange < 0, na.rm=T),
Up.padj = sum(padj < padj.alpha & log2FoldChange > 0, na.rm=T)) %>%
arrange(as.numeric(gsub("Comp", "", gsub("\\.", "", Contrast)))) %>%
mutate(Comparison = unlist(contrasts)) %>%
select(Contrast, Comparison, everything())
summary.combined <- results.combined.df %>% group_by(Contrast) %>%
summarise(Down.pvalue = sum(pvalue < p.alpha & log2FoldChange < 0, na.rm=T),
Up.pvalue = sum(pvalue < p.alpha & log2FoldChange > 0, na.rm=T),
Down.padj = sum(padj < padj.alpha & log2FoldChange < 0, na.rm=T),
Up.padj = sum(padj < padj.alpha & log2FoldChange > 0, na.rm=T)) %>%
arrange(as.numeric(gsub("Comp", "", gsub("\\.", "", Contrast)))) %>%
mutate(Comparison = unlist(model.contrasts)) %>%
select(Contrast, Comparison, everything())
DT::datatable(summary.combined)
summary.combined <- results.combined.df %>% group_by(Contrast) %>%
summarise(Down.pvalue = sum(pvalue < p.alpha & log2FoldChange < 0, na.rm=T),
Up.pvalue = sum(pvalue < p.alpha & log2FoldChange > 0, na.rm=T),
Down.padj = sum(padj < padj.alpha & log2FoldChange < 0, na.rm=T),
Up.padj = sum(padj < padj.alpha & log2FoldChange > 0, na.rm=T)) %>%
arrange(as.numeric(gsub("Comp", "", gsub("\\.", "", Contrast)))) %>%
mutate(Comparison = unlist(model.comparisons)) %>%
select(Contrast, Comparison, everything())
DT::datatable(summary.combined)
SummariseModelResults(dds.analysis, model.index = {{model.index}})
meta$filterNumRej
label.y <- max(meta$filterNumRej$numRej) - 0.8 * (max(meta$filterNumRej$numRej) - min(meta$filterNumRej$numRej))
label.x <- quantile(results.combined.df$baseMean,
meta$filterTheta + 0.15)
rejected.count <- sum(results.combined.df$baseMean < meta$filterThreshold &
!is.na(results.combined.df$pvalue))
ggplotly(meta$filterNumRej) %>% ggplot(aes(x = theta, y = numRej)) +
geom_line() +
geom_vline(xintercept = meta$filterThreshold, col = "red", alpha = 0.8) +
annotate(geom = "text", x = label.x, y =label.y,
label = sprintf("Expression filter: mean < %s quantile\nRemoved genes: %s",
floor(meta$filterThreshold), rejected.count),
color = "blue") +
labs(x = "Mean expression cutoff",
y = "Number of DEG's") + ggtitle("# of DEG's with baseMean filtering")
library(plotly)
label.y <- max(meta$filterNumRej$numRej) - 0.8 * (max(meta$filterNumRej$numRej) - min(meta$filterNumRej$numRej))
label.x <- quantile(results.combined.df$baseMean,
meta$filterTheta + 0.15)
rejected.count <- sum(results.combined.df$baseMean < meta$filterThreshold &
!is.na(results.combined.df$pvalue))
ggplotly(meta$filterNumRej) %>% ggplot(aes(x = theta, y = numRej)) +
geom_line() +
geom_vline(xintercept = meta$filterThreshold, col = "red", alpha = 0.8) +
annotate(geom = "text", x = label.x, y =label.y,
label = sprintf("Expression filter: mean < %s quantile\nRemoved genes: %s",
floor(meta$filterThreshold), rejected.count),
color = "blue") +
labs(x = "Mean expression cutoff",
y = "Number of DEG's") + ggtitle("# of DEG's with baseMean filtering")
label.y <- max(meta$filterNumRej$numRej) - 0.8 * (max(meta$filterNumRej$numRej) - min(meta$filterNumRej$numRej))
label.x <- quantile(results.combined.df$baseMean,
meta$filterTheta + 0.15)
rejected.count <- sum(results.combined.df$baseMean < meta$filterThreshold &
!is.na(results.combined.df$pvalue))
ggplotly(meta$filterNumRej %>% ggplot(aes(x = theta, y = numRej)) +
geom_line() +
geom_vline(xintercept = meta$filterThreshold, col = "red", alpha = 0.8) +
annotate(geom = "text", x = label.x, y =label.y,
label = sprintf("Expression filter: mean < %s quantile\nRemoved genes: %s",
floor(meta$filterThreshold), rejected.count),
color = "blue") +
labs(x = "Mean expression cutoff",
y = "Number of DEG's") + ggtitle("# of DEG's with baseMean filtering")
)
rejected.count <- sum(results.combined.df$baseMean < meta$filterThreshold &
!is.na(results.combined.df$pvalue))
rejected.count
meta$filterNumRej
meta$filterNumRej$theta
meta$filterNumRej$numRej
plot(meta$filterNumRej)
label.y <- max(meta$filterNumRej$numRej) - 0.8 * (max(meta$filterNumRej$numRej) - min(meta$filterNumRej$numRej))
label.x <- quantile(results.combined.df$baseMean,
meta$filterTheta + 0.15)
rejected.count <- sum(results.combined.df$baseMean < meta$filterThreshold &
!is.na(results.combined.df$pvalue))
ggplotly(meta$filterNumRej %>% ggplot(aes(x = theta, y = numRej)) +
geom_line() +
geom_vline(xintercept = meta$filterTheta, col = "red", alpha = 0.8) +
annotate(geom = "text", x = label.x, y =label.y,
label = sprintf("Expression filter: mean < %s quantile\nRemoved genes: %s",
floor(meta$filterThreshold), rejected.count),
color = "blue") +
labs(x = "Mean expression cutoff",
y = "Number of DEG's") + ggtitle("# of DEG's with baseMean filtering")
)
label.y <- max(meta$filterNumRej$numRej) - 0.8 * (max(meta$filterNumRej$numRej) - min(meta$filterNumRej$numRej))
label.x <- quantile(results.combined.df$baseMean,
meta$filterTheta + 0.15)
rejected.count <- sum(results.combined.df$baseMean < meta$filterThreshold &
!is.na(results.combined.df$pvalue))
ggplotly(meta$filterNumRej %>% ggplot(aes(x = theta, y = numRej)) +
geom_line() +
geom_vline(xintercept = meta$filterTheta, col = "red", alpha = 0.8) +
annotate(geom = "text", x = label.x, y =label.y,
label = sprintf("Expression filter: mean < %s quantile\nRemoved genes: %s",
floor(meta$filterThreshold), rejected.count),
color = "blue") +
labs(x = "Mean expression cutoff",
y = "Number of DEG's") + ggtitle("# of DEG's with baseMean filtering") +
xlim(c(0, 0.6))
)
pass <- results.combined.df$baseMean > meta$filterThreshold
if (length(unique(pass)) == 3) {
# Create two simple histograms of genes that do/don't pass the filter
h1 = hist(results.combined.df$pvalue[!pass], breaks=50, plot=FALSE)
h2 = hist(results.combined.df$pvalue[pass], breaks=50, plot=FALSE)
colori <- c(`do not pass`="khaki", `pass`="powderblue")
# Histogram
barplot(height = rbind(h1$counts, h2$counts),
beside = FALSE, col = colori, space = 0,
main = "Histogram of genes that pass filter, by p-value",
xlab = "pvalue",
ylab="frequency")
text(x = c(0, length(h1$counts)), y = 0,
label = paste(c(0,1)), adj = c(0.5,1.7),
xpd=NA)
legend("topright", fill=rev(colori), legend=rev(names(colori)))
}
pass <- results.combined.df$baseMean > meta$filterThreshold
if (length(unique(pass)) == 3) {
# Create two simple histograms of genes that do/don't pass the filter
h1 = hist(results.combined.df$pvalue[!pass], breaks=50, plot=FALSE)
h2 = hist(results.combined.df$pvalue[pass], breaks=50, plot=FALSE)
colori <- c(`do not pass`="khaki", `pass`="powderblue")
# Histogram
barplot(height = rbind(h1$counts, h2$counts),
beside = FALSE, col = colori, space = 0,
main = "Histogram of genes that pass filter, by p-value",
xlab = "pvalue",
ylab="frequency")
text(x = c(0, length(h1$counts)), y = 0,
label = paste(c(0,1)), adj = c(0.5,1.7),
xpd=NA)
legend("topright", fill=rev(colori), legend=rev(names(colori)))
}
pass
sum(pass)
meta$filterTheta
meta$filterThreshold
meta$filterThreshold <- 4
pass <- results.combined.df$baseMean > meta$filterThreshold
#
if (length(unique(pass)) == 3) {
# Create two simple histograms of genes that do/don't pass the filter
h1 = hist(results.combined.df$pvalue[!pass], breaks=50, plot=FALSE)
h2 = hist(results.combined.df$pvalue[pass], breaks=50, plot=FALSE)
colori <- c(`do not pass`="khaki", `pass`="powderblue")
# Histogram
barplot(height = rbind(h1$counts, h2$counts),
beside = FALSE, col = colori, space = 0,
main = "Histogram of genes that pass filter, by p-value",
xlab = "pvalue",
ylab="frequency")
text(x = c(0, length(h1$counts)), y = 0,
label = paste(c(0,1)), adj = c(0.5,1.7),
xpd=NA)
legend("topright", fill=rev(colori), legend=rev(names(colori)))
}
length(unique(pass))
pass <- results.combined.df$baseMean > meta$filterThreshold
#
if (length(unique(pass)) == 2) {
# Create two simple histograms of genes that do/don't pass the filter
h1 = hist(results.combined.df$pvalue[!pass], breaks=50, plot=FALSE)
h2 = hist(results.combined.df$pvalue[pass], breaks=50, plot=FALSE)
colori <- c(`do not pass`="khaki", `pass`="powderblue")
# Histogram
barplot(height = rbind(h1$counts, h2$counts),
beside = FALSE, col = colori, space = 0,
main = "Histogram of genes that pass filter, by p-value",
xlab = "pvalue",
ylab="frequency")
text(x = c(0, length(h1$counts)), y = 0,
label = paste(c(0,1)), adj = c(0.5,1.7),
xpd=NA)
legend("topright", fill=rev(colori), legend=rev(names(colori)))
}
pass <- results.combined.df$baseMean > meta$filterThreshold
#
if (length(unique(pass)) == 2) {
# Create two simple histograms of genes that do/don't pass the filter
h1 = hist(results.combined.df$pvalue[!pass], breaks=50, plot=FALSE)
h2 = hist(results.combined.df$pvalue[pass], breaks=50, plot=FALSE)
colori <- c(`do not pass`="khaki", `pass`="powderblue")
# Histogram
barplot(height = rbind(h1$counts, h2$counts),
beside = FALSE, col = colori, space = 0,
main = "Histogram of genes that pass expression filter, sorted by p-value",
xlab = "pvalue",
ylab="frequency")
text(x = c(0, length(h1$counts)), y = 0,
label = paste(c(0,1)), adj = c(0.5,1.7),
xpd=NA)
legend("topright", fill=rev(colori), legend=rev(names(colori)))
}
getwd()
devtools::install()
knitr::opts_chunk$set(echo = params$echo)
# Paths to DESeq2 analysis .Rmd files
# Every contrast gets its own 'section' and as such was hard to add to the
# GenerateReport() function for now.
deseq.model.rmd <- system.file("ReportSections/RnaSeq-DifferentialAnalysis-Model.Rmd", package = "RnaSeqAnalysis")
deseq.contrast.rmd <- system.file("ReportSections/RnaSeq-DifferentialAnalysis-Contrast.Rmd", package = "RnaSeqAnalysis")
deseq.chunks <- list()
# Loop over all designs and their contrasts
for (model.index in seq_along(dds.analysis$Models)) {
# Knit_expand model chunk with given model index
#   Includes a header and short intro of the model
deseq.model.chunk <- knitr::knit_expand(deseq.model.rmd,
model.index = model.index)
# Append model chunk string
deseq.chunks <- append(deseq.chunks, deseq.model.chunk)
# Loop over contrasts of given model
# for (contrast.i in seq_along()) {
#   # Design and contrast indices as a string
#   indices.char <- paste0(design.i, ".", contrast.i)
#   # Knit_expand contrast chunk
#   #   Includes
#   #     Results summary
#   #     MD plot
#   #     Append to output
#
#   deseq.contrast.chunk <- knitr::knit_expand(deseq.contrast.rmd)
#   # Append contrast chunk string
#   deseq.chunks <- append(deseq.chunks, deseq.contrast.chunk)
# }
}
deseq.model.rmd
deseq.model.rmd <- system.file("ReportSections/RnaSeq-DifferentialAnalysis-Model.Rmd", package = "RnaSeqAnalysis")
# Paths to DESeq2 analysis .Rmd files
# Every contrast gets its own 'section' and as such was hard to add to the
# GenerateReport() function for now.
deseq.model.rmd <- system.file("ReportSections/_DifferentialAnalysis-Model.Rmd", package = "RnaSeqAnalysis")
deseq.contrast.rmd <- system.file("ReportSections/RnaSeq-DifferentialAnalysis-Contrast.Rmd", package = "RnaSeqAnalysis")
deseq.chunks <- list()
# Loop over all designs and their contrasts
for (model.index in seq_along(dds.analysis$Models)) {
# Knit_expand model chunk with given model index
#   Includes a header and short intro of the model
deseq.model.chunk <- knitr::knit_expand(deseq.model.rmd,
model.index = model.index)
# Append model chunk string
deseq.chunks <- append(deseq.chunks, deseq.model.chunk)
# Loop over contrasts of given model
# for (contrast.i in seq_along()) {
#   # Design and contrast indices as a string
#   indices.char <- paste0(design.i, ".", contrast.i)
#   # Knit_expand contrast chunk
#   #   Includes
#   #     Results summary
#   #     MD plot
#   #     Append to output
#
#   deseq.contrast.chunk <- knitr::knit_expand(deseq.contrast.rmd)
#   # Append contrast chunk string
#   deseq.chunks <- append(deseq.chunks, deseq.contrast.chunk)
# }
}
devtools::install()
# Paths to DESeq2 analysis .Rmd files
# Every contrast gets its own 'section' and as such was hard to add to the
# GenerateReport() function for now.
deseq.model.rmd <- system.file("ReportSections/_DifferentialAnalysis-Model.Rmd", package = "RnaSeqAnalysis")
deseq.contrast.rmd <- system.file("ReportSections/RnaSeq-DifferentialAnalysis-Contrast.Rmd", package = "RnaSeqAnalysis")
deseq.chunks <- list()
# Loop over all designs and their contrasts
for (model.index in seq_along(dds.analysis$Models)) {
# Knit_expand model chunk with given model index
#   Includes a header and short intro of the model
deseq.model.chunk <- knitr::knit_expand(deseq.model.rmd,
model.index = model.index)
# Append model chunk string
deseq.chunks <- append(deseq.chunks, deseq.model.chunk)
# Loop over contrasts of given model
# for (contrast.i in seq_along()) {
#   # Design and contrast indices as a string
#   indices.char <- paste0(design.i, ".", contrast.i)
#   # Knit_expand contrast chunk
#   #   Includes
#   #     Results summary
#   #     MD plot
#   #     Append to output
#
#   deseq.contrast.chunk <- knitr::knit_expand(deseq.contrast.rmd)
#   # Append contrast chunk string
#   deseq.chunks <- append(deseq.chunks, deseq.contrast.chunk)
# }
}
devtools::install()
# Paths to DESeq2 analysis .Rmd files
# Every contrast gets its own 'section' and as such was hard to add to the
# GenerateReport() function for now.
deseq.model.rmd <- system.file("ReportSections/_DifferentialAnalysis-Model.Rmd", package = "RnaSeqAnalysis")
deseq.contrast.rmd <- system.file("ReportSections/RnaSeq-DifferentialAnalysis-Contrast.Rmd", package = "RnaSeqAnalysis")
deseq.chunks <- list()
# Loop over all designs and their contrasts
for (model.index in seq_along(dds.analysis$Models)) {
# Knit_expand model chunk with given model index
#   Includes a header and short intro of the model
deseq.model.chunk <- knitr::knit_expand(deseq.model.rmd,
model.index = model.index)
# Append model chunk string
deseq.chunks <- append(deseq.chunks, deseq.model.chunk)
# Loop over contrasts of given model
# for (contrast.i in seq_along()) {
#   # Design and contrast indices as a string
#   indices.char <- paste0(design.i, ".", contrast.i)
#   # Knit_expand contrast chunk
#   #   Includes
#   #     Results summary
#   #     MD plot
#   #     Append to output
#
#   deseq.contrast.chunk <- knitr::knit_expand(deseq.contrast.rmd)
#   # Append contrast chunk string
#   deseq.chunks <- append(deseq.chunks, deseq.contrast.chunk)
# }
}
devtools::install()
# Paths to DESeq2 analysis .Rmd files
# Every contrast gets its own 'section' and as such was hard to add to the
# GenerateReport() function for now.
deseq.model.rmd <- system.file("ReportSections/_DifferentialAnalysis-Model.Rmd", package = "RnaSeqAnalysis")
deseq.contrast.rmd <- system.file("ReportSections/RnaSeq-DifferentialAnalysis-Contrast.Rmd", package = "RnaSeqAnalysis")
deseq.chunks <- list()
# Loop over all designs and their contrasts
for (model.index in seq_along(dds.analysis$Models)) {
# Knit_expand model chunk with given model index
#   Includes a header and short intro of the model
deseq.model.chunk <- knitr::knit_expand(deseq.model.rmd,
model.index = model.index)
# Append model chunk string
deseq.chunks <- append(deseq.chunks, deseq.model.chunk)
# Loop over contrasts of given model
# for (contrast.i in seq_along()) {
#   # Design and contrast indices as a string
#   indices.char <- paste0(design.i, ".", contrast.i)
#   # Knit_expand contrast chunk
#   #   Includes
#   #     Results summary
#   #     MD plot
#   #     Append to output
#
#   deseq.contrast.chunk <- knitr::knit_expand(deseq.contrast.rmd)
#   # Append contrast chunk string
#   deseq.chunks <- append(deseq.chunks, deseq.contrast.chunk)
# }
}
deseq.chunks
cat(deseq.chunks)
cat(unlist(deseq.chunks))
save(dds.analysis, file = "inst/ExampleData/AnalysisOutput/Liver_DDS_Analysis.RData")
# Default example data
dds.file <- ifelse(params$dds.analysis == "NA",
system.file("ExampleData/AnalysisOutputLiver_DDS_Analysis.RData", package = "RnaSeqAnalysis"),
params$dds.analysis)
dds.file
params$dds.analysis
system.file("ExampleData/AnalysisOutputLiver_DDS_Analysis.RData", package = "RnaSeqAnalysis")
# Default example data
dds.file <- ifelse(params$dds.analysis == "NA",
system.file("ExampleData/Analysis/OutputLiver_DDS_Analysis.RData", package = "RnaSeqAnalysis"),
params$dds.analysis)
dds.file
# Default example data
dds.file <- ifelse(params$dds.analysis == "NA",
system.file("ExampleData/AnalysisOutput/Liver_DDS_Analysis.RData", package = "RnaSeqAnalysis"),
params$dds.analysis)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::build()
devtools::document()
devtools::install()
devtools::install()

select(ADG, PAPP, Compound, ADG_Day, Group) %>%
distinct() %>%
spread(ADG_Day, ADG)
View(df.adg.models)
group_by(Compound) %>%
nest() %>%
mutate(PappModel = map(data, ~lm(PAPP ~ ADG8 + ADG14 + ADG21 + Group, data = .)),
PappGlance = map(PappModel, broom::tidy),
AdgModel = map(data, ~lm(ADG14 ~ Group, data = .)),
AdgGlance = map(AdgModel, broom::tidy))
group_by(Compound) %>%
nest() %>%
mutate(PappModel = map(data, ~lm(PAPP ~ ADG8 + ADG14 + ADG21 + Group, data = .)),
PappGlance = map(PappModel, broom::tidy),
AdgModel = map(data, ~lm(ADG14 ~ Group, data = .)),
AdgGlance = map(AdgModel, broom::tidy))
df.adg.models <- df.corr.adg %>% ungroup() %>%
mutate(ADG_Day = paste0("ADG", Timepoint)) %>%
select(ADG, PAPP, Compound, ADG_Day, Group) %>%
distinct() %>%
spread(ADG_Day, ADG) %>%
group_by(Compound) %>%
nest() %>%
mutate(PappModel = map(data, ~lm(PAPP ~ ADG8 + ADG14 + ADG21 + Group, data = .)),
PappGlance = map(PappModel, broom::tidy),
AdgModel = map(data, ~lm(ADG14 ~ Group, data = .)),
AdgGlance = map(AdgModel, broom::tidy))
df.adg.models %>% unnest(AdgGlance) %>%
ggplot(aes(x = Compound, y = p.value, color = term)) + geom_bar(stat= "identity", position = "dodge")
df.adg.models %>% unnest(PappGlance) %>%
ggplot(aes(x = Compound, y = -log(p.value, 10), fill = term)) + geom_bar(stat= "identity", position = "dodge") +
ylim(c(0,5)) + geom_hline(yintercept = -log(0.05, 10), color = "red", alpha = 0.8, label = "0.05 significance")
ggsave(
df.adg.models %>% unnest(PappGlance) %>%
ggplot(aes(x = Compound, y = -log(p.value, 10), fill = term)) + geom_bar(stat= "identity", position = "dodge") +
ylim(c(0,5)) + geom_hline(yintercept = -log(0.05, 10), color = "red", alpha = 0.8, label = "0.05 significance"),
filename = "RegressionPlots/ADG_RegressionPerGroup.png")
ggsave(
df.adg.models %>% unnest(PappGlance) %>%
ggplot(aes(x = Compound, y = -log(p.value, 10), fill = term)) + geom_bar(stat= "identity", position = "dodge") +
ylim(c(0,5)) + geom_hline(yintercept = -log(0.05, 10), color = "red", alpha = 0.8) +
geom_text(aes(x = 4, y = -log(0.05, 10), label = "0.05 significance"))
filename = "RegressionPlots/ADG_RegressionPerGroup.png")
df.adg.models %>% unnest(PappGlance) %>%
ggplot(aes(x = Compound, y = -log(p.value, 10), fill = term)) + geom_bar(stat= "identity", position = "dodge") +
ylim(c(0,5)) + geom_hline(yintercept = -log(0.05, 10), color = "red", alpha = 0.8) +
geom_text(aes(x = 4, y = -log(0.05, 10), label = "0.05 significance"))
df.adg.models %>% unnest(PappGlance) %>%
ggplot(aes(x = Compound, y = -log(p.value, 10), fill = term)) + geom_bar(stat= "identity", position = "dodge") +
ylim(c(0,5)) + geom_hline(yintercept = -log(0.05, 10), color = "red", alpha = 0.8) +
geom_text(aes(x = 4, y = -log(0.05, 10), label = "0.05 significance"), vjust = 0.1)
df.adg.models %>% unnest(PappGlance) %>%
ggplot(aes(x = Compound, y = -log(p.value, 10), fill = term)) + geom_bar(stat= "identity", position = "dodge") +
ylim(c(0,5)) + geom_hline(yintercept = -log(0.05, 10), color = "red", alpha = 0.8) +
geom_text(aes(x = 4, y = -log(0.05, 10), label = "0.05 significance"), vjust = 0.2)
df.adg.models %>% unnest(PappGlance) %>%
ggplot(aes(x = Compound, y = -log(p.value, 10), fill = term)) + geom_bar(stat= "identity", position = "dodge") +
ylim(c(0,5)) + geom_hline(yintercept = -log(0.05, 10), color = "red", alpha = 0.8) +
geom_text(aes(x = 4, y = -log(0.05, 10), label = "0.05 significance"), vjust = 0.3)
df.adg.models %>% unnest(PappGlance) %>%
ggplot(aes(x = Compound, y = -log(p.value, 10), fill = term)) + geom_bar(stat= "identity", position = "dodge") +
ylim(c(0,5)) + geom_hline(yintercept = -log(0.05, 10), color = "red", alpha = 0.8) +
geom_text(aes(x = 4, y = -log(0.05, 10), label = "0.05 significance"), vjust = 1)
df.adg.models %>% unnest(PappGlance) %>%
ggplot(aes(x = Compound, y = -log(p.value, 10), fill = term)) + geom_bar(stat= "identity", position = "dodge") +
ylim(c(0,5)) + geom_hline(yintercept = -log(0.05, 10), color = "red", alpha = 0.8) +
geom_text(aes(x = 4, y = -log(0.05, 10), label = "0.05 significance"), vjust = -1)
df.adg.models %>% unnest(PappGlance) %>%
ggplot(aes(x = Compound, y = -log(p.value, 10), fill = term)) + geom_bar(stat= "identity", position = "dodge") +
ylim(c(0,5)) + geom_hline(yintercept = -log(0.05, 10), color = "red", alpha = 0.8) +
geom_text(aes(x = 4, y = -log(0.05, 10), label = "0.05 significance"), vjust = -08)
df.adg.models %>% unnest(PappGlance) %>%
ggplot(aes(x = Compound, y = -log(p.value, 10), fill = term)) + geom_bar(stat= "identity", position = "dodge") +
ylim(c(0,5)) + geom_hline(yintercept = -log(0.05, 10), color = "red", alpha = 0.8) +
geom_text(aes(x = 4, y = -log(0.05, 10), label = "0.05 significance"), vjust = -0.8)
df.adg.models %>% unnest(PappGlance) %>%
ggplot(aes(x = Compound, y = -log(p.value, 10), fill = term)) + geom_bar(stat= "identity", position = "dodge") +
ylim(c(0,5)) + geom_hline(yintercept = -log(0.05, 10), color = "red", alpha = 0.8) +
geom_text(aes(x = 4, y = -log(0.05, 10), label = "0.05 significance"), vjust = -0.5)
df.adg.models %>% unnest(PappGlance) %>%
ggplot(aes(x = Compound, y = -log(p.value, 10), fill = term)) + geom_bar(stat= "identity", position = "dodge") +
ylim(c(0,5)) + geom_hline(yintercept = -log(0.05, 10), color = "red", alpha = 0.8) +
geom_text(aes(x = 4, y = -log(0.05, 10), label = "0.05 significance"), vjust = -0.3)
ggsave(
df.adg.models %>% unnest(PappGlance) %>%
ggplot(aes(x = Compound, y = -log(p.value, 10), fill = term)) + geom_bar(stat= "identity", position = "dodge") +
ylim(c(0,5)) + geom_hline(yintercept = -log(0.05, 10), color = "red", alpha = 0.8) +
geom_text(aes(x = 4, y = -log(0.05, 10), label = "0.05 significance"), vjust = -0.3),
filename = "RegressionPlots/ADG_RegressionPerGroup.png")
df.adg_leakage.models <- df.corr.adg %>% ungroup() %>%
mutate(ADG_Day = paste0("ADG", Timepoint)) %>%
filter(TimeStart.FD4 == 0) %>%
select(ADG, PAPP, Leak.hour, ADG_Day, Group) %>%
distinct() %>%
spread(ADG_Day, ADG) %>%
group_by(Compound) %>%
nest() %>%
mutate(FD4Model = map(data, ~lm(Leak.hour ~ ADG8 + ADG14 + ADG21 + Group, data = .)),
FD4Glance = map(PappModel, broom::tidy))
df.adg_leakage.models <- df.corr.adg %>% ungroup() %>%
mutate(ADG_Day = paste0("ADG", Timepoint)) %>%
filter(TimeStart.FD4 == 0) %>%
select(ADG, Compound.FD4, Leak.hour, ADG_Day, Group) %>%
distinct() %>%
spread(ADG_Day, ADG) %>%
group_by(Compound.FD4) %>%
nest() %>%
mutate(FD4Model = map(data, ~lm(Leak.hour ~ ADG8 + ADG14 + ADG21 + Group, data = .)),
FD4Glance = map(PappModel, broom::tidy))
df.adg_leakage.models <- df.corr.adg %>% ungroup() %>%
mutate(ADG_Day = paste0("ADG", Timepoint)) %>%
filter(TimeStart.FD4 == 0) %>%
select(ADG, Compound.FD4, Leak.hour, ADG_Day, Group) %>%
distinct() %>%
spread(ADG_Day, ADG) %>%
group_by(Compound.FD4) %>%
nest() %>%
mutate(FD4Model = map(data, ~lm(Leak.hour ~ ADG8 + ADG14 + ADG21 + Group, data = .)),
FD4Glance = map(FD4Model, broom::tidy))
df.adg_leakage.models %>% unnest(FD4Glance) %>%
ggplot(aes(x = Compound.FD4, y = p.value, color = term)) + geom_bar(stat= "identity", position = "dodge")
ggsave(
df.adg_leakage.models %>% unnest(FD4Glance) %>%
ggplot(aes(x = Compound, y = -log(p.value, 10), fill = term)) + geom_bar(stat= "identity", position = "dodge") +
ylim(c(0,5)) + geom_hline(yintercept = -log(0.05, 10), color = "red", alpha = 0.8) +
geom_text(aes(x = 4, y = -log(0.05, 10), label = "0.05 significance"), vjust = -0.3),
filename = "RegressionPlots/ADG_FD4_RegressionPerGroup.png")
ggsave(
df.adg_leakage.models %>% unnest(FD4Glance) %>%
ggplot(aes(x = Compound.FD4, y = -log(p.value, 10), fill = term)) + geom_bar(stat= "identity", position = "dodge") +
ylim(c(0,5)) + geom_hline(yintercept = -log(0.05, 10), color = "red", alpha = 0.8) +
geom_text(aes(x = 4, y = -log(0.05, 10), label = "0.05 significance"), vjust = -0.3),
filename = "RegressionPlots/ADG_FD4_RegressionPerGroup.png")
ggsave(
df.adg_leakage.models %>% unnest(FD4Glance) %>%
ggplot(aes(x = Compound.FD4, y = -log(p.value, 10), fill = term)) + geom_bar(stat= "identity", position = "dodge") +
ylim(c(0,5)) + geom_hline(yintercept = -log(0.05, 10), color = "red", alpha = 0.8) +
geom_text(aes(x = 2, y = -log(0.05, 10), label = "0.05 significance"), vjust = -0.3),
filename = "RegressionPlots/ADG_FD4_RegressionPerGroup.png")
df.adg_leakage.models %>% unnest(FD4Glance)
df.adg.models <- df.corr.adg %>% ungroup() %>%
mutate(ADG_Day = paste0("ADG", Timepoint)) %>%
select(ADG, PAPP, Compound, ADG_Day, Group) %>%
distinct() %>%
spread(ADG_Day, ADG) %>%
group_by(Compound) %>%
nest() %>%
mutate(PappModel = map(data, ~lm(PAPP ~ ADG8 + ADG14 + ADG21 + Group, data = .)),
PappGlance = map(PappModel, broom::tidy),
AdgModel = map(data, ~lm(ADG14 ~ Group, data = .)),
AdgGlance = map(AdgModel, broom::tidy))
df.adg.models %>% unnest(AdgGlance) %>%
ggplot(aes(x = Compound, y = p.value, color = term)) + geom_bar(stat= "identity", position = "dodge")
ggsave(
df.adg.models %>% unnest(PappGlance) %>%
ggplot(aes(x = Compound, y = -log(p.value, 10), fill = term)) + geom_bar(stat= "identity", position = "dodge") +
ylim(c(0,5)) + geom_hline(yintercept = -log(0.05, 10), color = "red", alpha = 0.8) +
geom_text(aes(x = 4, y = -log(0.05, 10), label = "0.05 significance"), vjust = -0.3),
filename = "RegressionPlots/ADG_PAPP_RegressionPerGroup.png")
df.adg_leakage.models <- df.corr.adg %>% ungroup() %>%
mutate(ADG_Day = paste0("ADG", Timepoint)) %>%
# filter(TimeStart.FD4 == 0) %>%
select(ADG, Compound.FD4, Leak.hour, ADG_Day, Group) %>%
distinct() %>%
spread(ADG_Day, ADG) %>%
group_by(Compound.FD4, TimeStart.FD4) %>%
nest() %>%
mutate(FD4Model = map(data, ~lm(Leak.hour ~ ADG8 + ADG14 + ADG21 + Group, data = .)),
FD4Glance = map(FD4Model, broom::tidy))
df.adg_leakage.models <- df.corr.adg %>% ungroup() %>%
mutate(ADG_Day = paste0("ADG", Timepoint)) %>%
# filter(TimeStart.FD4 == 0) %>%
select(ADG, TimeStart.FD4, Compound.FD4, Leak.hour, ADG_Day, Group) %>%
distinct() %>%
spread(ADG_Day, ADG) %>%
group_by(Compound.FD4, TimeStart.FD4) %>%
nest() %>%
mutate(FD4Model = map(data, ~lm(Leak.hour ~ ADG8 + ADG14 + ADG21 + Group, data = .)),
FD4Glance = map(FD4Model, broom::tidy))
df.adg_leakage.models %>% unnest(FD4Glance) %>%
ggplot(aes(x = Compound.FD4, y = p.value, color = term)) + geom_bar(stat= "identity", position = "dodge")
ggsave(
df.adg_leakage.models %>% unnest(FD4Glance) %>%
ggplot(aes(x = Compound.FD4, y = -log(p.value, 10), fill = term)) + geom_bar(stat= "identity", position = "dodge") +
ylim(c(0,5)) + geom_hline(yintercept = -log(0.05, 10), color = "red", alpha = 0.8) +
geom_text(aes(x = 2, y = -log(0.05, 10), label = "0.05 significance"), vjust = -0.3),
filename = "RegressionPlots/ADG_FD4_T0_RegressionPerGroup.png")
View(df.adg_leakage.models)
df.adg_leakage.models %>% unnest(FD4Glance) %>%
ggplot(aes(x = Compound.FD4, y = p.value, color = term)) + geom_bar(stat= "identity", position = "dodge") +
facet_grid(.~TimeStart.FD4)
df.adg_leakage.models %>% unnest(FD4Glance) %>%
ggplot(aes(x = Compound.FD4, y = p.value, fill = term)) + geom_bar(stat= "identity", position = "dodge") +
facet_grid(.~TimeStart.FD4)
ggsave(
df.adg_leakage.models %>% unnest(FD4Glance) %>%
ggplot(aes(x = Compound.FD4, y = -log(p.value, 10), fill = term)) + geom_bar(stat= "identity", position = "dodge") +
ylim(c(0,5)) + geom_hline(yintercept = -log(0.05, 10), color = "red", alpha = 0.8) +
geom_text(aes(x = 2, y = -log(0.05, 10), label = "0.05 significance"), vjust = -0.3) +
facet_grid(.~TimeStart.FD4),
filename = "RegressionPlots/ADG_FD4_T0_RegressionPerGroup.png")
df.adg_leakage.models %>% unnest(FD4Glance)
df.leakage.results <- df.adg_leakage.models %>% unnest(FD4Glance)
View(df.leakage.results)
plot(df.adg.models$PappModel[[1]])
par(mfrow = c(2,2))
plot(df.adg.models$PappModel[[1]])
plot(df.adg.models$PappModel[[2]])
plot(df.adg.models$PappModel[[3]])
plot(df.adg.models$PappModel[[4]])
save(datExpr, file = "datExpr.RData")
# Load report variables
#   This includes the deseq data including gene expression, sample data (and soon annotation data)
#   This also includes the differential genes
load("../04. Differential 2/OutputData/ReportVariables.RData")
# Remove outliers
# outlier.inds <- c(1,9,27,54,59)
# Replace coldata for now
# colData <- ReadColData("../../Data/liver/Liver_colData_Endpoints.csv")
# dds <- DESeqDataSetFromMatrix(countTable, colData, ~1)
# dds <- dds[, -outlier.inds]
# dds <- estimateSizeFactors(dds)
# dds <- estimateDispersions(dds)
# Remove samples at timepoints 6 and 0
dds <- dds[, dds$TimeNum %in% c(12, 18, 24)]
vsd <- varianceStabilizingTransformation(dds)
library(WGCNA)
library(plotly)
library(DESeq2)
library(tidyverse)
library(RColorBrewer)
library(drake)
source("WGCNA_HelperFuns.R")
library(RnaSeqPipeline)
# Load report variables
#   This includes the deseq data including gene expression, sample data (and soon annotation data)
#   This also includes the differential genes
load("../04. Differential 2/OutputData/ReportVariables.RData")
# Remove outliers
# outlier.inds <- c(1,9,27,54,59)
# Replace coldata for now
# colData <- ReadColData("../../Data/liver/Liver_colData_Endpoints.csv")
# dds <- DESeqDataSetFromMatrix(countTable, colData, ~1)
# dds <- dds[, -outlier.inds]
# dds <- estimateSizeFactors(dds)
# dds <- estimateDispersions(dds)
# Remove samples at timepoints 6 and 0
dds <- dds[, dds$TimeNum %in% c(12, 18, 24)]
vsd <- varianceStabilizingTransformation(dds)
vsd <- vsd[, dds$TimeNum %in% c(12, 18, 24)]
# Set contrast
contrast <- c("Diet.x", "HFD", "chow")
# Load the TOM dissimilarity matrix already estimated using the WGCNA dashboard
# inputData <- as.data.frame(counts(dds, normalized = TRUE)) %>%
# filter(rowMeans(.) > 20 & mcols(dds)$dispersion > 0.04)
inputData <- as.data.frame(assay(vsd)) %>%
# Rownames get removed when using the piping operator (Hadley hates rownames!)
mutate(GeneName = row.names(.)) %>%
filter(rowMeans(counts(dds, normalized = TRUE)) > 20 & mcols(dds)$dispersion > 0.01)
# Re-do rownames
rownames(inputData) <- inputData$GeneName
# Make data formatted for WGCNA
datExpr <- t(inputData[, -ncol(inputData)])
colnames(datExpr) <- rownames(inputData)
datTraits <- colData(vsd)
save(datExpr, file = "datExpr.RData")
save(datTraits, file = "datTraits.Rdata")
### NOTE: DO NOT FILTER BY DIFFERENTIALLY EXPRESSED GENES
### https://labs.genetics.ucla.edu/horvath/CoexpressionNetwork/Rpackages/WGCNA/faq.html
# datExpr <- t(counts(dds, normalized = TRUE)[DiffAtleastOnce$SignifOnce,])
# Enable multi-threading if possible
allowWGCNAThreads(nThreads = 6)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
load("../Analysis_Liver/03. WGCNA Liver/datExpr.RData")
datExpr_Liver <- datExpr
rm(datExpr)
load("../Analysis_Liver/03. WGCNA Liver/datTraits.Rdata")
datTraits_Liver <- datTraits
rm(datTraits)
load("../Analysis_Liver/03. WGCNA Liver/MDS_Scaling_HFD.RData")
colorh1 = NetworkList$HFD$moduleColors
# Liver data
# Input data
load("../Analysis_Liver/03. WGCNA Liver/datExpr.RData")
datExpr_Liver <- datExpr
rm(datExpr)
load("../Analysis_Liver/03. WGCNA Liver/datTraits.Rdata")
datTraits_Liver <- datTraits
rm(datTraits)
#
load("../Analysis_Liver/03. WGCNA Liver/SoftThresholding.RData")
thresholds_Liver <- thresholds.list
load("../Analysis_Liver/03. WGCNA Liver/MKMD1_HFD-block.1.RData")
TOM_HFD_Liver = TOM
load("../Analysis_Liver/03. WGCNA Liver/MKMD1_Chow-block.1.RData")
TOM_Chow_Liver = TOM
load("../Analysis_Liver/03. WGCNA Liver/MKMD1_Total-block.1.RData")
TOM_Total_Liver = TOM
rm(TOM)
# Liver blockwise modules
load(file = "../Analysis_Liver/03. WGCNA Liver/HFD_blockwiseModules.RData")
load(file = "../Analysis_Liver/03. WGCNA Liver/Chow_blockwiseModules.RData")
load(file = "../Analysis_Liver/03. WGCNA Liver/Total_blockwiseModules.RData")
NetworkList <- list(HFD = net1, Chow = net2, Total = netTotal)
# Set HFD values for plotting
NetworkList$HFD$moduleLabels = NetworkList$HFD$colors
NetworkList$HFD$moduleColors = labels2colors(NetworkList$HFD$colors)
NetworkList$HFD$colorOrder = c("grey", standardColors(50))
NetworkList$HFD$moduleLabels = match(NetworkList$HFD$moduleColors, NetworkList$HFD$colorOrder)-1
NetworkList$HFD$MEs = NetworkList$HFD$MEs
NetworkList$HFD$geneTree = NetworkList$HFD$dendrograms[[1]]
NetworkList$HFD$mergedColors = labels2colors(NetworkList$HFD$colors)
# Set Chow values for plotting
NetworkList$Chow$moduleLabels = NetworkList$Chow$colors
NetworkList$Chow$moduleColors = labels2colors(NetworkList$Chow$colors)
NetworkList$Chow$colorOrder = c("grey", standardColors(50))
NetworkList$Chow$moduleLabels = match(NetworkList$Chow$moduleColors, NetworkList$Chow$colorOrder)-1
NetworkList$Chow$MEs = NetworkList$Chow$MEs
NetworkList$Chow$geneTree = NetworkList$Chow$dendrograms[[1]]
NetworkList$Chow$mergedColors = labels2colors(NetworkList$Chow$colors)
# Set Total values for plotting
NetworkList$Total$moduleLabels = NetworkList$Total$colors
NetworkList$Total$moduleColors = labels2colors(NetworkList$Total$colors)
NetworkList$Total$colorOrder = c("grey", standardColors(50))
NetworkList$Total$moduleLabels = match(NetworkList$Total$moduleColors, NetworkList$Total$colorOrder)-1
NetworkList$Total$MEs = NetworkList$Total$MEs
NetworkList$Total$geneTree = NetworkList$Total$dendrograms[[1]]
NetworkList$Total$mergedColors = labels2colors(NetworkList$Total$colors)
# Aorta data
# TOM_HFD_Liver <- load("../Analysis_Liver/03. WGCNA Liver/MKMD1_HFD-block.1.RData")
# TOM_Chow_Liver <- load("../Analysis_Liver/03. WGCNA Liver/MKMD1_Chow-block.1.RData")
# TOM_Total_Liver <- load("../Analysis_Liver/03. WGCNA Liver/MKMD1_Total-block.1.RData")
colorh1 = NetworkList$HFD$moduleColors
MEdata = moduleEigengenes(datExpr_Liver, NetworkList$HFD$moduleColors, softPower = 14)
varExpl = t(MEdata$varExplained)
rownames(varExpl) = colnames(MEdata$eigengenes)
varExpl
minVarExpl = 0.5
validMods = rownames(varExpl)[varExpl >= minVarExpl]
colorh1
validMods
pca.plotdata <- data.frame(cmd1, color = as.character(colorh1)) %>%
filter(color != "grey" & color %in% validMods)
pal <- setNames(as.character(unique(pca.plotdata$color)), unique(pca.plotdata$color))
plot_ly(pca.plotdata, x = ~X1, y = ~X2, z = ~X3) %>%
add_markers(color = ~color, colors = pal)
pca.plotdata <- data.frame(cmd1, color = as.character(colorh1)) %>%
filter(color != "grey" & color %in% gsub("^ME", "", validMods))
pal <- setNames(as.character(unique(pca.plotdata$color)), unique(pca.plotdata$color))
plot_ly(pca.plotdata, x = ~X1, y = ~X2, z = ~X3) %>%
add_markers(color = ~color, colors = pal)
validMods
# cmd2=cmdscale(as.dist(TOM_Chow), 3)
# save(cmd2, file = "MDS_Scaling_Chow.RData")
load("../Analysis_Liver/03. WGCNA Liver/MDS_Scaling_Chow.RData")
## Check PCA scores of eigengens
MEdata = moduleEigengenes(datExpr_Liver, NetworkList$Chow$moduleColors, softPower = 14)
varExpl = t(MEdata$varExplained)
rownames(varExpl) = colnames(MEdata$eigengenes)
# write.table(varExpl, file = paste(myOutPath, "eigengene.PC1.scores.txt", sep=""), sep = "\t", quote = F, col.names=F)
minVarExpl = 0.5
validMods = rownames(varExpl)[varExpl >= minVarExpl]
colorh1 = NetworkList$Chow$moduleColors
pca.plotdata <- data.frame(cmd2, color = as.character(colorh1)) %>%
filter(color != "grey")
pal <- setNames(as.character(unique(pca.plotdata$color)), unique(pca.plotdata$color))
plot_ly(pca.plotdata, x = ~X1, y = ~X2, z = ~X3) %>%
add_markers(color = ~color, colors = pal)
validMods
# cmd2=cmdscale(as.dist(TOM_Chow), 3)
# save(cmd2, file = "MDS_Scaling_Chow.RData")
load("../Analysis_Liver/03. WGCNA Liver/MDS_Scaling_Chow.RData")
## Check PCA scores of eigengens
MEdata = moduleEigengenes(datExpr_Liver, NetworkList$Chow$moduleColors, softPower = 14)
varExpl = t(MEdata$varExplained)
rownames(varExpl) = colnames(MEdata$eigengenes)
# write.table(varExpl, file = paste(myOutPath, "eigengene.PC1.scores.txt", sep=""), sep = "\t", quote = F, col.names=F)
minVarExpl = 0.5
validMods = rownames(varExpl)[varExpl >= minVarExpl]
colorh1 = NetworkList$Chow$moduleColors
pca.plotdata <- data.frame(cmd2, color = as.character(colorh1)) %>%
filter(color != "grey"  & color %in% gsub("^ME", "", validMods))
pal <- setNames(as.character(unique(pca.plotdata$color)), unique(pca.plotdata$color))
plot_ly(pca.plotdata, x = ~X1, y = ~X2, z = ~X3) %>%
add_markers(color = ~color, colors = pal)
# cmd2=cmdscale(as.dist(TOM_Chow), 3)
# save(cmd2, file = "MDS_Scaling_Chow.RData")
load("../Analysis_Liver/03. WGCNA Liver/MDS_Scaling_Chow.RData")
## Check PCA scores of eigengens
MEdata = moduleEigengenes(datExpr_Liver, NetworkList$Chow$moduleColors, softPower = 14)
varExpl = t(MEdata$varExplained)
rownames(varExpl) = colnames(MEdata$eigengenes)
# write.table(varExpl, file = paste(myOutPath, "eigengene.PC1.scores.txt", sep=""), sep = "\t", quote = F, col.names=F)
minVarExpl = 0.5
validMods = rownames(varExpl)[varExpl >= minVarExpl]
colorh1 = NetworkList$Chow$moduleColors
pca.plotdata <- data.frame(cmd2, color = as.character(colorh1)) %>%
filter(color != "grey60"  & color %in% gsub("^ME", "", validMods))
pal <- setNames(as.character(unique(pca.plotdata$color)), unique(pca.plotdata$color))
plot_ly(pca.plotdata, x = ~X1, y = ~X2, z = ~X3) %>%
add_markers(color = ~color, colors = pal)
validMods
# cmd2=cmdscale(as.dist(TOM_Chow), 3)
# save(cmd2, file = "MDS_Scaling_Chow.RData")
load("../Analysis_Liver/03. WGCNA Liver/MDS_Scaling_Chow.RData")
## Check PCA scores of eigengens
MEdata = moduleEigengenes(datExpr_Liver, NetworkList$Chow$moduleColors, softPower = 14)
varExpl = t(MEdata$varExplained)
rownames(varExpl) = colnames(MEdata$eigengenes)
# write.table(varExpl, file = paste(myOutPath, "eigengene.PC1.scores.txt", sep=""), sep = "\t", quote = F, col.names=F)
minVarExpl = 0.5
validMods = rownames(varExpl)[varExpl >= minVarExpl]
colorh1 = NetworkList$Chow$moduleColors
pca.plotdata <- data.frame(cmd2, color = as.character(colorh1)) %>%
filter(color != "grey"  & color %in% gsub("^ME", "", validMods))
pal <- setNames(as.character(unique(pca.plotdata$color)), unique(pca.plotdata$color))
plot_ly(pca.plotdata, x = ~X1, y = ~X2, z = ~X3) %>%
add_markers(color = ~color, colors = pal)
setwd("C:/Users/twillerthtlv/TNO/KIP BMH - 3.1 Biomarkers BDC - Team/Work/Analysis/06. Differential WGCNA")
load("ReportOutput/DifferentialOutput.RData")
library(WGCNA)
library(DESeq2)
library(RnaSeqAnalysis)
library(tidyverse)
library(plotly)
library(sva)
load("../ReportOutput/DifferentialOutput.RData")
# Setup WGCNA data
inputData <- as.data.frame(assay(vsd)) %>%
mutate(GeneName = row.names(.)) %>%
filter(rowMeans(counts(dds, normalized = TRUE)) > 20) %>%
select(GeneName, everything()) %>%
top_n(6000, apply(., 1, function(x) var(x[-1]))) %>%
top_n(5590, -apply(., 1, function(x) var(x[-1])))
# Rownames get removed when using the piping operator (Hadley hates rownames!)
inputCounts <- data.frame(counts(dds, normalized = TRUE)) %>%
filter(row.names(.) %in% inputData$GeneName)
# Re-do rownames
rownames(inputData) <- inputData$GeneName
# Make data formatted for WGCNA
#   We put GeneName in the first column - so remove that again, only used as since rownames and dplyr don't play nice
datExpr <- t(inputData[, -1])
modcombat = model.matrix(~1, data=datTraits)
# Setup WGCNA data
inputData <- as.data.frame(assay(vsd)) %>%
mutate(GeneName = row.names(.)) %>%
filter(rowMeans(counts(dds, normalized = TRUE)) > 20) %>%
select(GeneName, everything()) %>%
top_n(6000, apply(., 1, function(x) var(x[-1]))) %>%
top_n(5590, -apply(., 1, function(x) var(x[-1])))
# Rownames get removed when using the piping operator (Hadley hates rownames!)
datTraits <- colData(vsd)
inputCounts <- data.frame(counts(dds, normalized = TRUE)) %>%
filter(row.names(.) %in% inputData$GeneName)
# Re-do rownames
rownames(inputData) <- inputData$GeneName
# Make data formatted for WGCNA
#   We put GeneName in the first column - so remove that again, only used as since rownames and dplyr don't play nice
datExpr <- t(inputData[, -1])
# modcombat = model.matrix(~1, data=datTraits)
# datExpr <- t(ComBat(t(datExpr), datTraits$TimeNum, mod = modcombat, par.prior = TRUE))
colnames(datExpr) <- rownames(inputData)
### NOTE: DO NOT FILTER BY DIFFERENTIALLY EXPRESSED GENES
### https://labs.genetics.ucla.edu/horvath/CoexpressionNetwork/Rpackages/WGCNA/faq.html
# Enable multi-threading if possible
allowWGCNAThreads(nThreads = 6)
contrast <- c("Diet.x", "HFD","chow")
SubsetsFromContrast <- function(colData, contrast) {
group1 <- which(colData[, contrast[1]] == contrast[2])
group2 <- which(colData[, contrast[1]] == contrast[3])
return(setNames(list(group1, group2), nm = contrast[2:3]))
}
subsets <- SubsetsFromContrast(datTraits, contrast)
thresholds.list <- WGCNA_ThresholdSubsets(datExpr, subsets = subsets)
WGCNA_PlotThresholds(thresholds.list$fitIndices)
save(thresholds.list, file = "SoftThresholding.RData")
WGCNA_PlotThresholds(thresholds.list$fitIndices)
load("SoftThresholding.RData")
chosen.power <- max(unlist(thresholds.list$powerEstimates))
# chosen.power <- 16
save(NetworkList, file = "NetworkList.Rdata")
load(file = "NetworkList.Rdata")
setwd("C:/Users/twillerthtlv/TNO/KIP BMH - 3.1 Biomarkers BDC - Team/Work/Analysis/06. Differential WGCNA/WGCNA_Modules")
NetworkList <- WGCNA_SubsetModules(datExpr,
subsets = subsets,
include.total = TRUE,
power = chosen.power)
wd <- getwd()
setwd("C:/Users/twillerthtlv/GitLab/DataScience-MSB/Pipelines/RnaSeqAnalysis")
devtools::install()
devtools::install()
NetworkList <- WGCNA_SubsetModules(datExpr,
subsets = subsets,
include.total = TRUE,
power = chosen.power)
save(NetworkList, file = "NetworkList.Rdata")
load(file = "NetworkList.Rdata")
TOMList <- list()
for (netname in names(NetworkList)) {
load(file = NetworkList[[netname]]$TOMFiles)
TOMList[[netname]] <- TOM
}
rm(TOM)
?adjacency
?adjacency.polyReg
?flashClust
geneTreeA1  = flashClust(as.dist(TOMList$HFD), method="average")
install.packages("flashClust")
library(flashClust)
library(flashClust)
install.packages("flashClust")
library(flashClust)

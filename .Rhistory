stringsAsFactors = FALSE,
row.names = sampleNames(pronova.eset))
# fData(pronova.eset) <- annotationData
annotation(pronova.eset) <- "mmu"
ids <- rownames(pronova.eset)
# lgc <- EDASeq::getGeneLengthAndGCContent(ids, org="mmu", mode="biomart")
# write.table(lgc, file = "04.DESeq2_Analysis/data/pronova_lgc.tab", sep = "\t")
# Use pre-computed
# fData(pronova.eset) <- cbind(fData(pronova.eset), read.delim(file = "04.DESeq2_Analysis/data/pronova_lgc.tab"))
pronova.eset <- normalize(pronova.eset, within = TRUE, norm.method="quantile")
pronova.eset <- de.ana(pronova.eset, de.method="limma",
grp = as.numeric(as.factor(phenoData(pronova.eset)$Treatment)) - 1)
pronova.eset <- map.ids(pronova.eset, org="mmu", from="ENSEMBL", to="ENTREZID")
# Download gene sets
kegg.gs <- gage::kegg.gsets(species="mmu")
kegg.gs <- kegg.gs$kg.sets[kegg.gs$sigmet.idx] # Exclude diseases
# if (!dir.exists("EnrichmentData")) dir.create("EnrichmentData")
# save(kegg.gs, file = "EnrichmentData/mmu.gs.RData")
load(file = "EnrichmentData/mmu.gs.RData")
# go.gs <- getGenesets(org="hsa", db="go", go.onto="BP", go.mode="GO.db"
# kegg.grn <- compile.grn.from.kegg("mmu")
# save(kegg.grn, file = "EnrichmentData/mmu.grn.RData")
load(file = "EnrichmentData/mmu.grn.RData")
config.ebrowser(key="OUTDIR.DEFAULT", value=file.path(getwd()))
# Do actual analyses
pathnet.res <- nbea(method="pathnet", eset=pronova.eset, gs=kegg.gs, grn=kegg.grn,
padj.method = "BH", alpha = 0.1)
ggea.res <- nbea(method = "ggea", eset=pronova.eset, gs=kegg.gs, grn=kegg.grn,
padj.method = "BH", perm = 0, alpha=0.1)
ora.res <- sbea(method="ora", eset=pronova.eset, gs=kegg.gs, alpha=0.1,
padj.method = "BH")
combined.res <- comb.ea.results(list(pathnet.res,
ggea.res, ora.res))
# Standard directory with EnrichmentBrowser, so we follow along:)
if (!dir.exists("results")) dir.create("results")
write.table(gs.ranking(combined.res), file = "results/enrichment_results.tsv",
sep = "\t")
# Check valid pathview / kegg graphs
# EXTREMELY ANNOYING BUT AT LEAST THIS WAY WE DON'T CAUSE ERRORS
# IN ea.browse()
# or actually in pathvew()!
# If ea.browse() finds the same error we do with pathview() then it will
# just quit.
# Therefore, a sloppy fix is to remove invalid pathways...:(
pw.result <- list()
select = AnnotationDbi::select # In case you loaded dplyr.
for (pw in gs.ranking(combined.res)$GENE.SET) {
pw <- strsplit(pw, "_")[[1]][1]
pw.result[[pw]] <- try(pathview(gene.data = gene.data[,1],
pathway.id = pw,
species = "mmu"))
}
which.error <- which(sapply(pw.result, function(x) class(x)=="try-error"))
pw.blacklist <- gs.ranking(combined.res)$GENE.SET[which.error]
print(which.error)
kegg.gs
names(kegg.gs) <- gsub(" ", "_",  names(kegg.gs))
# Do actual analyses
pathnet.res <- nbea(method="pathnet", eset=pronova.eset, gs=kegg.gs, grn=kegg.grn,
padj.method = "BH", alpha = 0.1)
combined.res <- comb.ea.results(list(pathnet.res,
ggea.res, ora.res))
# Standard directory with EnrichmentBrowser, so we follow along:)
if (!dir.exists("results")) dir.create("results")
write.table(gs.ranking(combined.res), file = "results/enrichment_results.tsv",
sep = "\t")
# Check valid pathview / kegg graphs
# EXTREMELY ANNOYING BUT AT LEAST THIS WAY WE DON'T CAUSE ERRORS
# IN ea.browse()
# or actually in pathvew()!
# If ea.browse() finds the same error we do with pathview() then it will
# just quit.
# Therefore, a sloppy fix is to remove invalid pathways...:(
pw.result <- list()
select = AnnotationDbi::select # In case you loaded dplyr.
for (pw in gs.ranking(combined.res)$GENE.SET) {
pw <- strsplit(pw, "_")[[1]][1]
pw.result[[pw]] <- try(pathview(gene.data = gene.data[,1],
pathway.id = pw,
species = "mmu"))
}
which.error <- which(sapply(pw.result, function(x) class(x)=="try-error"))
pw.blacklist <- gs.ranking(combined.res)$GENE.SET[which.error]
print(which.error)
# Remove failed pathways from enrichment browser results
# results still present in output .tsv file!
combined.res$res.tbl <- combined.res$res.tbl[-which.error,]
# Clean report directory
#   Default report output is file.path(config.ebrowser("OUTDIR.DEFAULT"), "results/reports")
#   Don't use it for other reports because they will be removed
#   TODO: Clean directory in a better way:)
unlink(file.path(config.ebrowser("OUTDIR.DEFAULT"), "results/reports"))
ea.browse(combined.res)
for (pw in gs.ranking(combined.res)$GENE.SET) {
pw <- strsplit(pw, "_")[[1]][1]
pw.result[[pw]] <- try(pathview(gene.data = gene.data[,1],
pathway.id = pw,
species = "mmu"))
}
gs.ranking(combined.res)
combined.res <- comb.ea.results(list(pathnet.res,
ggea.res, ora.res))
# Standard directory with EnrichmentBrowser, so we follow along:)
if (!dir.exists("results")) dir.create("results")
write.table(gs.ranking(combined.res), file = "results/enrichment_results.tsv",
sep = "\t")
# Check valid pathview / kegg graphs
# EXTREMELY ANNOYING BUT AT LEAST THIS WAY WE DON'T CAUSE ERRORS
# IN ea.browse()
# or actually in pathvew()!
# If ea.browse() finds the same error we do with pathview() then it will
# just quit.
# Therefore, a sloppy fix is to remove invalid pathways...:(
pw.result <- list()
select = AnnotationDbi::select # In case you loaded dplyr.
for (pw in gs.ranking(combined.res)$GENE.SET) {
pw <- strsplit(pw, "_")[[1]][1]
pw.result[[pw]] <- try(pathview(gene.data = gene.data[,1],
pathway.id = pw,
species = "mmu"))
}
combined.es
combined.res
combined.res$res.tbl
gs.ranking(ora.res)
gs.ranking(ggea.res)
gs.ranking(pathnet.res)
ora.res <- sbea(method="ora", eset=pronova.eset, gs=kegg.gs, alpha=0.1,
padj.method = "BH", perm = 0)
combined.res <- comb.ea.results(list(pathnet.res,
ggea.res, ora.res))
# Standard directory with EnrichmentBrowser, so we follow along:)
if (!dir.exists("results")) dir.create("results")
write.table(gs.ranking(combined.res), file = "results/enrichment_results.tsv",
sep = "\t")
# Check valid pathview / kegg graphs
# EXTREMELY ANNOYING BUT AT LEAST THIS WAY WE DON'T CAUSE ERRORS
# IN ea.browse()
# or actually in pathvew()!
# If ea.browse() finds the same error we do with pathview() then it will
# just quit.
# Therefore, a sloppy fix is to remove invalid pathways...:(
pw.result <- list()
select = AnnotationDbi::select # In case you loaded dplyr.
for (pw in gs.ranking(combined.res)$GENE.SET) {
pw <- strsplit(pw, "_")[[1]][1]
pw.result[[pw]] <- try(pathview(gene.data = gene.data[,1],
pathway.id = pw,
species = "mmu"))
}
which.error <- which(sapply(pw.result, function(x) class(x)=="try-error"))
gs.ranking(ora.res)
combined.res <- comb.ea.results(list(pathnet.res,
ggea.res, ora.res))
gs.ranking(combined.res)
gs.ranking(ora.res)
gs.ranking(pathnet.res)
combined.res <- comb.ea.results(list(pathnet.res,
ggea.res, ora.res))
gs.ranking(combined.res)
combined.res$res.tbl
ora.res$res.tbl
pathnet.res$res.tbl
ora.res$res.tbl
kegg.gs <- get.kegg.genesets("mmu")
names(kegg.gs)
# Download gene sets
gage.gs <- gage::kegg.gsets(species="mmu")
setdiff(names(gage.gs), names(kegg.gs))
setdiff(names(gage.gs$kg.sets[kegg.gs$sigmet.idx]), names(kegg.gs))
gage.gs$kg.sets
setdiff(names(gage.gs$kg.sets, names(kegg.gs))
setdiff(names(gage.gs$kg.sets), names(kegg.gs))
setdiff(gsub(" ", "_", names(gage.gs$kg.sets)), names(kegg.gs))
?comb.ea.results
gs.ganking(pathnet.res)
gs.ranking(pathnet.res)
pathnet.res
pathnet.res <- nbea(method="pathnet", eset=pronova.eset, gs=kegg.gs, grn=kegg.grn,
padj.method = "BH", alpha = 0.1)
ggea.res <- nbea(method = "ggea", eset=pronova.eset, gs=kegg.gs, grn=kegg.grn,
padj.method = "BH", perm = 0, alpha=0.1)
ora.res <- sbea(method="ora", eset=pronova.eset, gs=kegg.gs, alpha=0.1,
padj.method = "BH", perm = 0)
combined.res <- comb.ea.results(list(pathnet.res,
ggea.res, ora.res))
combined.res$res.tbl
gs.ranking(combined.res)
# Standard directory with EnrichmentBrowser, so we follow along:)
if (!dir.exists("results")) dir.create("results")
write.table(gs.ranking(combined.res), file = "results/enrichment_results.tsv",
sep = "\t")
# Check valid pathview / kegg graphs
# EXTREMELY ANNOYING BUT AT LEAST THIS WAY WE DON'T CAUSE ERRORS
# IN ea.browse()
# or actually in pathvew()!
# If ea.browse() finds the same error we do with pathview() then it will
# just quit.
# Therefore, a sloppy fix is to remove invalid pathways...:(
pw.result <- list()
select = AnnotationDbi::select # In case you loaded dplyr.
for (pw in gs.ranking(combined.res)$GENE.SET) {
pw <- strsplit(pw, "_")[[1]][1]
pw.result[[pw]] <- try(pathview(gene.data = gene.data[,1],
pathway.id = pw,
species = "mmu"))
}
which.error <- which(sapply(pw.result, function(x) class(x)=="try-error"))
pw.blacklist <- gs.ranking(combined.res)$GENE.SET[which.error]
print(which.error)
# Remove failed pathways from enrichment browser results
# results still present in output .tsv file!
combined.res$res.tbl <- combined.res$res.tbl[-which.error,]
# Clean report directory
#   Default report output is file.path(config.ebrowser("OUTDIR.DEFAULT"), "results/reports")
#   Don't use it for other reports because they will be removed
#   TODO: Clean directory in a better way:)
unlink(file.path(config.ebrowser("OUTDIR.DEFAULT"), "results/reports"))
ea.browse(combined.res)
assayDataElementNames(pronova.eset)
gene.data <- assayDataElement(pronova.eset, "counts")
select = AnnotationDbi::select # In case you loaded dplyr.
for (pw in gs.ranking(combined.res)$GENE.SET) {
pw <- strsplit(pw, "_")[[1]][1]
pw.result[[pw]] <- try(pathview(gene.data = gene.data[,1],
pathway.id = pw,
species = "mmu"))
}
which.error <- which(sapply(pw.result, function(x) class(x)=="try-error"))
pw.blacklist <- gs.ranking(combined.res)$GENE.SET[which.error]
print(which.error)
# Check valid pathview / kegg graphs
# EXTREMELY ANNOYING BUT AT LEAST THIS WAY WE DON'T CAUSE ERRORS
# IN ea.browse()
# or actually in pathvew()!
# If ea.browse() finds the same error we do with pathview() then it will
# just quit.
# Therefore, a sloppy fix is to remove invalid pathways...:(
pw.result <- list()
gene.data <- assayDataElement(pronova.eset, "counts")
select = AnnotationDbi::select # In case you loaded dplyr.
for (pw in gs.ranking(combined.res)$GENE.SET) {
pw <- strsplit(pw, "_")[[1]][1]
pw.result[[pw]] <- try(pathview(gene.data = gene.data[,1],
pathway.id = pw,
species = "mmu"))
}
which.error <- which(sapply(pw.result, function(x) class(x)=="try-error"))
pw.blacklist <- gs.ranking(combined.res)$GENE.SET[which.error]
print(which.error)
# Remove failed pathways from enrichment browser results
# results still present in output .tsv file!
combined.res$res.tbl <- combined.res$res.tbl[-which.error,]
# Clean report directory
#   Default report output is file.path(config.ebrowser("OUTDIR.DEFAULT"), "results/reports")
#   Don't use it for other reports because they will be removed
#   TODO: Clean directory in a better way:)
unlink(file.path(config.ebrowser("OUTDIR.DEFAULT"), "results/reports"))
ea.browse(combined.res)
combined.res
combined.res$res.tbl
combined.res <- comb.ea.results(list(pathnet.res,
ggea.res, ora.res))
ea.browse(combined.res)
config.ebrowser("OUTDIR.DEFAULT")
"C://Users/twillerthtlv/Desktop/DumpDocs/"
config.ebrowser(key = "OUTDIR.DEFAULT",
key = "C://Users/twillerthtlv/Desktop/DumpDocs/eBrowser_Output/")
config.ebrowser(key = "OUTDIR.DEFAULT",
value = "C://Users/twillerthtlv/Desktop/DumpDocs/eBrowser_Output/")
# Clean report directory
#   Default report output is file.path(config.ebrowser("OUTDIR.DEFAULT"), "results/reports")
#   Don't use it for other reports because they will be removed
#   TODO: Clean directory in a better way:)
unlink(file.path(config.ebrowser("OUTDIR.DEFAULT"), "results/reports"))
ea.browse(combined.res)
pw.result <- list()
gene.data <- assayDataElement(pronova.eset, "counts")
select = AnnotationDbi::select # In case you loaded dplyr.
for (pw in gs.ranking(combined.res)$GENE.SET) {
pw <- strsplit(pw, "_")[[1]][1]
pw.result[[pw]] <- try(pathview(gene.data = gene.data[,1],
pathway.id = pw,
species = "mmu"))
}
which.error <- which(sapply(pw.result, function(x) class(x)=="try-error"))
pw.blacklist <- gs.ranking(combined.res)$GENE.SET[which.error]
print(which.error)
# Remove failed pathways from enrichment browser results
# results still present in output .tsv file!
if (length(which.error) > 0) combined.res$res.tbl <- combined.res$res.tbl[-which.error,]
#
config.ebrowser(key="OUTDIR.DEFAULT", value=file.path(getwd()))
config.ebrowser(key = "OUTDIR.DEFAULT",
value = "C://Users/twillerthtlv/Desktop/DumpDocs/eBrowser_Output/")
# Clean report directory
#   Default report output is file.path(config.ebrowser("OUTDIR.DEFAULT"), "results/reports")
#   Don't use it for other reports because they will be removed
#   TODO: Clean directory in a better way:)
unlink(file.path(config.ebrowser("OUTDIR.DEFAULT"), "results/reports"))
ea.browse(combined.res)
ggea.res <- nbea(method = "ggea", eset=pronova.eset, gs=kegg.gs, grn=kegg.grn,
padj.method = "BH", perm = 300, alpha=0.1)
gs.ranking(ggea.res)
combined.res <- comb.ea.results(list(pathnet.res,
ggea.res, ora.res))
# Clean report directory
#   Default report output is file.path(config.ebrowser("OUTDIR.DEFAULT"), "results/reports")
#   Don't use it for other reports because they will be removed
#   TODO: Clean directory in a better way:)
unlink(file.path(config.ebrowser("OUTDIR.DEFAULT"), "results/reports"))
ea.browse(combined.res)
which.remove <- Which(!is.na(match(gs.ranking(combined.res)$GENE.SET, pw.blacklist)))
which.remove <- which(!is.na(match(gs.ranking(combined.res)$GENE.SET, pw.blacklist)))
which.remove
# Remove failed pathways from enrichment browser results
# results still present in output .tsv file!
if (length(which.remove) > 0) combined.res$res.tbl <- combined.res$res.tbl[-which.remove,]
# Clean report directory
#   Default report output is file.path(config.ebrowser("OUTDIR.DEFAULT"), "results/reports")
#   Don't use it for other reports because they will be removed
#   TODO: Clean directory in a better way:)
unlink(file.path(config.ebrowser("OUTDIR.DEFAULT"), "results/reports"))
ea.browse(combined.res)
getwd()
write.table(gs.ranking(combined.res), file = "results/enrichment_results.tsv",
sep = "\t")
library(EnrichmentBrowser)
library(RnaSeqAnalysis)
setwd("//tsn.tno.nl/data/sv/sv-029705/Ampyroseq02/TNO.RNA.021.Pronova.apr18rd/05. Enrichment Analysis/")
counts <- ReadCounts("../04.DESeq2_Analysis/data/merged.counts.tsv")
coldata <- ReadColData("../04.DESeq2_Analysis/data/Pronova_ColData.txt")
annotationData <- AnnotateCounts(counts, "Mouse", "ENSEMBL")
coldata$GROUP = as.numeric(as.factor(coldata$Treatment)) - 1
expr <- as.matrix(counts)
pronova.eset <- new("ExpressionSet", exprs = expr, counts = expr)
pData(pronova.eset) <- data.frame(coldata,
stringsAsFactors = FALSE,
row.names = sampleNames(pronova.eset))
# fData(pronova.eset) <- annotationData
annotation(pronova.eset) <- "mmu"
# before.norm <- assayDataElement(pronova.eset, 'counts')
# allSE <- normalize(pronova.eset, norm.method="quantile")
# after.norm <- assayDataElement(allSE, 'normalizedCounts')
# par(mfrow=c(1,2))
# boxplot(before.norm)
# boxplot(after.norm)
ids <- rownames(pronova.eset)
# lgc <- EDASeq::getGeneLengthAndGCContent(ids, org="mmu", mode="biomart")
# write.table(lgc, file = "EnrichmentData/pronova_lgc.tab", sep = "\t")
# Use pre-computed
# fData(pronova.eset) <- cbind(fData(pronova.eset), read.delim(file = "04.DESeq2_Analysis/data/pronova_lgc.tab"))
pronova.eset <- normalize(pronova.eset, within = TRUE, norm.method="quantile")
pronova.eset <- map.ids(pronova.eset, org="mmu", from="ENSEMBL", to="ENTREZID")
# Download gene sets
gage.gs <- gage::kegg.gsets(species="mmu")
kegg.gs <- kegg.gs$kg.sets[kegg.gs$sigmet.idx] # Exclude diseases
# if (!dir.exists("EnrichmentData")) dir.create("EnrichmentData")
# save(kegg.gs, file = "EnrichmentData/mmu.gs.RData")
load(file = "EnrichmentData/mmu.gs.RData")
# go.gs <- getGenesets(org="hsa", db="go", go.onto="BP", go.mode="GO.db"
# kegg.grn <- compile.grn.from.kegg("mmu")
# save(kegg.grn, file = "EnrichmentData/mmu.grn.RData")
load(file = "EnrichmentData/mmu.grn.RData")
names(kegg.gs) <- gsub(" ", "_",  names(kegg.gs))
# Do actual analyses
pathnet.res <- nbea(method="pathnet", eset=pronova.eset, gs=kegg.gs, grn=kegg.grn,
padj.method = "BH", alpha = 0.1)
ggea.res <- nbea(method = "ggea", eset=pronova.eset, gs=kegg.gs, grn=kegg.grn,
padj.method = "BH", perm = 300, alpha=0.1)
ora.res <- sbea(method="ora", eset=pronova.eset, gs=kegg.gs, alpha=0.1,
padj.method = "BH", perm = 0)
combined.res <- comb.ea.results(list(pathnet.res,
ggea.res, ora.res))
# Standard directory with EnrichmentBrowser, so we follow along:)
if (!dir.exists("results")) dir.create("results")
write.table(gs.ranking(combined.res), file = "results/enrichment_results.tsv",
sep = "\t")
# Check valid pathview / kegg graphs
# EXTREMELY ANNOYING BUT AT LEAST THIS WAY WE DON'T CAUSE ERRORS
# IN ea.browse()
# or actually in pathvew()!
# If ea.browse() finds the same error we do with pathview() then it will
# just quit.
# Therefore, a sloppy fix is to remove invalid pathways...:(
pw.result <- list()
gene.data <- assayDataElement(pronova.eset, "counts")
select = AnnotationDbi::select # In case you loaded dplyr.
for (pw in gs.ranking(combined.res)$GENE.SET) {
pw <- strsplit(pw, "_")[[1]][1]
pw.result[[pw]] <- try(pathview(gene.data = gene.data[,1],
pathway.id = pw,
species = "mmu"))
}
which.error <- which(sapply(pw.result, function(x) class(x)=="try-error"))
pw.blacklist <- gs.ranking(combined.res)$GENE.SET[which.error]
which.remove <- which(!is.na(match(gs.ranking(combined.res)$GENE.SET, pw.blacklist)))
print(which.error)
# Remove failed pathways from enrichment browser results
# results still present in output .tsv file!
if (length(which.remove) > 0) combined.res$res.tbl <- combined.res$res.tbl[-which.remove,]
#
config.ebrowser(key="OUTDIR.DEFAULT", value=file.path(getwd()))
config.ebrowser(key = "OUTDIR.DEFAULT",
value = "C://Users/twillerthtlv/Desktop/DumpDocs/eBrowser_Output/")
# Clean report directory
#   Default report output is file.path(config.ebrowser("OUTDIR.DEFAULT"), "results/reports")
#   Don't use it for other reports because they will be removed
#   TODO: Clean directory in a better way:)
unlink(file.path(config.ebrowser("OUTDIR.DEFAULT"), "results/reports"))
ea.browse(combined.res, graph.view = kegg.grn)
library(EnrichmentBrowser)
library(RnaSeqAnalysis)
setwd("//tsn.tno.nl/data/sv/sv-029705/Ampyroseq02/TNO.RNA.021.Pronova.apr18rd/05. Enrichment Analysis/")
counts <- ReadCounts("../04.DESeq2_Analysis/data/merged.counts.tsv")
coldata <- ReadColData("../04.DESeq2_Analysis/data/Pronova_ColData.txt")
annotationData <- AnnotateCounts(counts, "Mouse", "ENSEMBL")
coldata$GROUP = as.numeric(as.factor(coldata$Treatment)) - 1
expr <- as.matrix(counts)
pronova.eset <- new("ExpressionSet", exprs = expr, counts = expr)
pData(pronova.eset) <- data.frame(coldata,
stringsAsFactors = FALSE,
row.names = sampleNames(pronova.eset))
# fData(pronova.eset) <- annotationData
annotation(pronova.eset) <- "mmu"
# before.norm <- assayDataElement(pronova.eset, 'counts')
# allSE <- normalize(pronova.eset, norm.method="quantile")
# after.norm <- assayDataElement(allSE, 'normalizedCounts')
# par(mfrow=c(1,2))
# boxplot(before.norm)
# boxplot(after.norm)
ids <- rownames(pronova.eset)
# lgc <- EDASeq::getGeneLengthAndGCContent(ids, org="mmu", mode="biomart")
# write.table(lgc, file = "EnrichmentData/pronova_lgc.tab", sep = "\t")
# Use pre-computed
# fData(pronova.eset) <- cbind(fData(pronova.eset), read.delim(file = "04.DESeq2_Analysis/data/pronova_lgc.tab"))
# pronova.eset <- normalize(pronova.eset, within = TRUE, norm.method="quantile")
pronova.eset <- de.ana(pronova.eset, de.method="limma",
grp = as.numeric(as.factor(phenoData(pronova.eset)$Treatment)) - 1)
pronova.eset <- map.ids(pronova.eset, org="mmu", from="ENSEMBL", to="ENTREZID")
# Download gene sets
gage.gs <- gage::kegg.gsets(species="mmu")
kegg.gs <- kegg.gs$kg.sets[kegg.gs$sigmet.idx] # Exclude diseases
# if (!dir.exists("EnrichmentData")) dir.create("EnrichmentData")
# save(kegg.gs, file = "EnrichmentData/mmu.gs.RData")
load(file = "EnrichmentData/mmu.gs.RData")
# go.gs <- getGenesets(org="hsa", db="go", go.onto="BP", go.mode="GO.db"
# kegg.grn <- compile.grn.from.kegg("mmu")
# save(kegg.grn, file = "EnrichmentData/mmu.grn.RData")
load(file = "EnrichmentData/mmu.grn.RData")
#
names(kegg.gs) <- gsub(" ", "_",  names(kegg.gs))
# Do actual analyses
pathnet.res <- nbea(method="pathnet", eset=pronova.eset, gs=kegg.gs, grn=kegg.grn,
padj.method = "BH", alpha = 0.1)
ggea.res <- nbea(method = "ggea", eset=pronova.eset, gs=kegg.gs, grn=kegg.grn,
padj.method = "BH", perm = 300, alpha=0.1)
ora.res <- sbea(method="ora", eset=pronova.eset, gs=kegg.gs, alpha=0.1,
padj.method = "BH", perm = 0)
combined.res <- comb.ea.results(list(pathnet.res,
ggea.res, ora.res))
# Standard directory with EnrichmentBrowser, so we follow along:)
if (!dir.exists("results")) dir.create("results")
write.table(gs.ranking(combined.res), file = "results/enrichment_results.tsv",
sep = "\t")
# Check valid pathview / kegg graphs
# EXTREMELY ANNOYING BUT AT LEAST THIS WAY WE DON'T CAUSE ERRORS
# IN ea.browse()
# or actually in pathvew()!
# If ea.browse() finds the same error we do with pathview() then it will
# just quit.
# Therefore, a sloppy fix is to remove invalid pathways...:(
pw.result <- list()
gene.data <- assayDataElement(pronova.eset, "counts")
select = AnnotationDbi::select # In case you loaded dplyr.
for (pw in gs.ranking(combined.res)$GENE.SET) {
pw <- strsplit(pw, "_")[[1]][1]
pw.result[[pw]] <- try(pathview(gene.data = gene.data[,1],
pathway.id = pw,
species = "mmu"))
}
which.error <- which(sapply(pw.result, function(x) class(x)=="try-error"))
pw.blacklist <- gs.ranking(combined.res)$GENE.SET[which.error]
which.remove <- which(!is.na(match(gs.ranking(combined.res)$GENE.SET, pw.blacklist)))
print(which.error)
# Remove failed pathways from enrichment browser results
# results still present in output .tsv file!
if (length(which.remove) > 0) combined.res$res.tbl <- combined.res$res.tbl[-which.remove,]
#
config.ebrowser(key="OUTDIR.DEFAULT", value=file.path(getwd()))
config.ebrowser(key = "OUTDIR.DEFAULT",
value = "C://Users/twillerthtlv/Desktop/DumpDocs/eBrowser_Output/")
# Clean report directory
#   Default report output is file.path(config.ebrowser("OUTDIR.DEFAULT"), "results/reports")
#   Don't use it for other reports because they will be removed
#   TODO: Clean directory in a better way:)
unlink(file.path(config.ebrowser("OUTDIR.DEFAULT"), "results/reports"))
ea.browse(combined.res, graph.view = kegg.grn)
gs.ranking(pathnet.res)
gs.ranking(ora.res)
gs.ranking(ggea.res)
pronova.eset
ggea.res <- nbea(method = "ggea", eset=pronova.eset, gs=kegg.gs, grn=kegg.grn,
padj.method = "BH", perm = 0, alpha=0.1)
gs.ranking(ggea.res)
data.frame(gs.ranking(ggea.res))
?EnrichmentBrowser::read.eset
coldata
write.table(gs.ranking(combined.res, signif.only = FALSE), file = "results/enrichment_results.tsv",
sep = "\t")
write.table(gs.ranking(combined.res, signif.only = FALSE), file = "results/enrichment_results.tsv",
sep = "\t")

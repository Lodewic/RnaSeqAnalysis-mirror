library(ggplot2)
sessionI
sessionInfo()
libray(DESeq2)
library(DESeq2)
# One PhenoDb package
library(PhenoDb)
#authentication procedure
setPhenotypeDatabaseBaseUrl("https://dashin.eu/interventionstudies/api/")
user = "lodewic.vantwillert"
skey = "25c92be1-234b-4b44-8c94-f94bb4cd7326"
authenticate(user, paste(readline()), skey)
#get available studies & select specific study
#   match either by code or title
#   One or the other must be NULL (or not passed to getStudyToken())
studyTitle <- NULL     # Set part of the study title to match with grep()
studyCode <- "9218_Fat_challenge_tests"   # OR part of the study code
# Gather all study data tokens
studies = getStudies()
studyToken <- getStudyToken(studies, code = studyCode, title = studyTitle)
assays = getAssaysForStudy(studyToken)
# Get all study data in data.frames
studiesDf <- studiesToDataframe(studies)
studyFeatures <- getFeaturesDataframe(assays, format = "long")
studySubjects <- getSubjectsDataframe(assays)
# This part is the same as getAssaysDataframe()
# Except that we split it up to keep the assays in a list to check for character
# values
studyAssaysList <- getAssaysList(assays)
allCharactersTable <- findCharacters(studyAssaysList) # All character values in a table
studyAssays <- assaysList2Dataframe(assays, studyAssaysList)
# Summarise values by group
#   Simple statistics like the mean, quantiles, standard deviation etc.
summaryGroups <- c("Variable", "Assay", "Condition", "AbsTime", "RelTime")
assaysSummary <- summariseAssays(studyAssays, summaryGroups = summaryGroups)
# Nested data per group for further analysis:)
nestGroups <- c("Variable", "Assay")
assayNest <- nestAssays(studyAssays, summaryGroups = nestGroups) %>%
mutate(PlotTitle = paste0(vars(nestGroups), sep = ", "))
# Function to map boxplot
mapBoxplot <- function(df, title,
plotCols = list(x = "RelTime",
y = "Value",
color = "RelTime",
facet1 = "AbsTime",
facet2 = "Condition")) {
gg <- ggplot(df, aes(x = RelTime, y = Value, color = RelTime)) +
geom_boxplot()
if (length(unique(df$Condition)) > 1) {
gg <- gg + facet_grid(. ~ Condition)
}
return(gg)
}
# Plots from nested data
#   The resulting dataframe will eat up your memory since it stores plots
#   for every group. Consider filtering uninteresting entries before plotting:)
assayPlots <- assayNest %>%
# filter(some condition...) %>%
mutate(Boxplot = map2(data, Variable, ~ mapBoxplot(df = .x, title = .y,
plotCols = list(x = "RelTime",
y = "Value",
color = "RelTime",
facet1 = "AbsTime",
facet2 = "Condition"))))
# One PhenoDb package
library(PhenoDb)
#authentication procedure
setPhenotypeDatabaseBaseUrl("https://dashin.eu/interventionstudies/api/")
user = "lodewic.vantwillert"
skey = "25c92be1-234b-4b44-8c94-f94bb4cd7326"
authenticate(user, paste(readline()), skey)
#   One or the other must be NULL (or not passed to getStudyToken())
studyTitle <- NULL     # Set part of the study title to match with grep()
studyCode <- "9218_Fat_challenge_tests"   # OR part of the study code
# Gather all study data tokens
studies = getStudies()
studyToken <- getStudyToken(studies, code = studyCode, title = studyTitle)
assays = getAssaysForStudy(studyToken)
# Get all study data in data.frames
studiesDf <- studiesToDataframe(studies)
studyFeatures <- getFeaturesDataframe(assays, format = "long")
studySubjects <- getSubjectsDataframe(assays)
# This part is the same as getAssaysDataframe()
# Except that we split it up to keep the assays in a list to check for character
# values
studyAssaysList <- getAssaysList(assays)
allCharactersTable <- findCharacters(studyAssaysList) # All character values in a table
studyAssays <- assaysList2Dataframe(assays, studyAssaysList)
# Summarise values by group
#   Simple statistics like the mean, quantiles, standard deviation etc.
summaryGroups <- c("Variable", "Assay", "Condition", "AbsTime", "RelTime")
assaysSummary <- summariseAssays(studyAssays, summaryGroups = summaryGroups)
# Nested data per group for further analysis:)
nestGroups <- c("Variable", "Assay")
assayNest <- nestAssays(studyAssays, summaryGroups = nestGroups) %>%
mutate(PlotTitle = paste0(vars(nestGroups), sep = ", "))
# Function to map boxplot
mapBoxplot <- function(df, title,
plotCols = list(x = "RelTime",
y = "Value",
color = "RelTime",
facet1 = "AbsTime",
facet2 = "Condition")) {
gg <- ggplot(df, aes(x = RelTime, y = Value, color = RelTime)) +
geom_boxplot()
if (length(unique(df$Condition)) > 1) {
gg <- gg + facet_grid(. ~ Condition)
}
return(gg)
}
# Plots from nested data
#   The resulting dataframe will eat up your memory since it stores plots
#   for every group. Consider filtering uninteresting entries before plotting:)
assayPlots <- assayNest %>%
# filter(some condition...) %>%
mutate(Boxplot = map2(data, Variable, ~ mapBoxplot(df = .x, title = .y,
plotCols = list(x = "RelTime",
y = "Value",
color = "RelTime",
facet1 = "AbsTime",
facet2 = "Condition"))))
assayPlots$Boxplot[[1]]
assayPlots$Boxplot[[4]]
map(assayNest$data, length(unique(.x$Condition)))
map(assayNest$data, ~ length(unique(.x$Condition)))
assayPlots$Boxplot[[8]]
View(assayPlots)
assayPlots$Boxplot[[6]]
assayPlots$Boxplot[[8]]
assayPlots$Boxplot[[9]]
# Function to map boxplot
mapBoxplot <- function(df, title,
plotCols = list(x = "RelTime",
y = "Value",
color = "RelTime",
facet1 = "AbsTime",
facet2 = "Condition")) {
gg <- ggplot(df, aes(x = RelTime, y = Value, color = RelTime)) +
geom_boxplot() + ggtitle(title)
if (length(unique(df$Condition)) > 1) {
gg <- gg + facet_grid(. ~ Condition)
}
return(gg)
}
# Plots from nested data
#   The resulting dataframe will eat up your memory since it stores plots
#   for every group. Consider filtering uninteresting entries before plotting:)
assayPlots <- assayNest %>%
# filter(some condition...) %>%
mutate(Boxplot = map2(data, Variable, ~ mapBoxplot(df = .x, title = .y,
plotCols = list(x = "RelTime",
y = "Value",
color = "RelTime",
facet1 = "AbsTime",
facet2 = "Condition"))))
assayPlots$Boxplot[[9]]
df.waist <- assayPlots$data[[9]]
View(df.waist)
df.waist %>% group_by(RelTime) %>% tally()
df.waist %>% group_by(Subject) %>% tally()
df.waist %>% group_by(Subject, RelTime) %>% tally()
setwd("~/GitLab/DataScience-MSB/Pipelines/RnaSeqAnalysis")
setwd("~/GitLab/DataScience-MSB/Pipelines/RnaSeqAnalysis")
setwd("~/GitLab/DataScience-MSB/PhenoDb")
# One PhenoDb package
library(PhenoDb)
#authentication procedure
setPhenotypeDatabaseBaseUrl("https://dashin.eu/interventionstudies/api/")
user = "lodewic.vantwillert"
skey = "25c92be1-234b-4b44-8c94-f94bb4cd7326"
authenticate(user, rstudioapi::askForPassword(), skey)
# Gather all study data tokens
studies = getStudies()
#get available studies & select specific study
#   match either by code or title
#   One or the other must be NULL (or not passed to getStudyToken())
studyTitle <- NULL     # Set part of the study title to match with grep()
studyCode <- "Graandioo"   # OR part of the study code
studyToken <- getStudyToken(studies, code = studyCode, title = studyTitle)
studyToken
assays = getAssaysForStudy(studyToken)
names(assays[[1]])
subs <- getSubjectsForAssay(assays[[1]]$token)
subs <- getSubjectsForAssay(assays[[1]]$token)
setwd("~/GitLab/DataScience-MSB/Pipelines/RnaSeqAnalysis")
library(DESeq2)
library(RnaSeqAnalysis)
########################
### SET THE DATA
########################
counts <- ReadCounts(system.file("ExampleData/MKMD/Liver_Counts.csv", package = "RnaSeqAnalysis"))
coldata <- ReadColData(system.file("ExampleData/MKMD/Liver_colData_Endpoints.csv", package = "RnaSeqAnalysis"))
annotationData <- AnnotateCounts(counts, species = "Mouse", key.type = "ENSEMBL",
multiVals = "first")
dds <- DESeqDataSetFromMatrix(counts, coldata, design = ~1)
saveRDS(dds, file = "inst/ExampleData/Liver_DDS.RData")
knit_with_parameters('~/GitLab/DataScience-MSB/Pipelines/RnaSeqAnalysis/inst/ReportSections/RnaSeq-Data-Input.Rmd')
load("inst/ExampleData/Liver_DDS.RData")
saveRDS(dds, file = "inst/ExampleData/Liver_DDS.rds")
load("inst/ExampleData/Liver_DDS.RData")
load("inst/ExampleData/Liver_DDS.rds")
save(dds, file = "inst/ExampleData/Liver_DDS.RData")
load("inst/ExampleData/Liver_DDS.RData")
knit_with_parameters('~/GitLab/DataScience-MSB/Pipelines/RnaSeqAnalysis/inst/ReportSections/RnaSeq-Data-Input.Rmd')
knit_with_parameters('~/GitLab/DataScience-MSB/Pipelines/RnaSeqAnalysis/inst/ReportSections/RnaSeq-Data-Input.Rmd')
load("inst/ExampleData/Liver_DDS.RData")
knit_with_parameters('~/GitLab/DataScience-MSB/Pipelines/RnaSeqAnalysis/inst/ReportSections/RnaSeq-Data-Input.Rmd')
dds
getwd()
devtools::install()
if (is.na(params$dds)) dds <- system.file("ExampleData/Liver_DDS.RData")
params
if (is.na(params$dds)) dds <- system.file("ExampleData/Liver_DDS.RData")
dds <- system.file("ExampleData/Liver_DDS.RData", package = "RnaSeqAnalysis")
if (is.na(params$dds)) dds <- system.file("ExampleData/Liver_DDS.RData", package = "RnaSeqAnalysis")
if (is.na(params$dds)) print( system.file("ExampleData/Liver_DDS.RData", package = "RnaSeqAnalysis"))
is.na(params$dds)
if (params$dds == "NA")) print( system.file("ExampleData/Liver_DDS.RData", package = "RnaSeqAnalysis"))
if (params$dds == "NA") print( system.file("ExampleData/Liver_DDS.RData", package = "RnaSeqAnalysis"))
knitr::opts_chunk$set(echo = params$echo)
library(DT)
library(RnaSeqAnalysis)
library(DESeq2)
if (params$dds == "NA") params$dds <- system.file("ExampleData/Liver_DDS.RData", package = "RnaSeqAnalysis")
params
dds <- estimateSizeFactors(dds)
library(DESeq2)
library(RnaSeqAnalysis)
########################
### SET THE DATA
########################
counts <- ReadCounts(system.file("ExampleData/MKMD/Liver_Counts.csv", package = "RnaSeqAnalysis"))
coldata <- ReadColData(system.file("ExampleData/MKMD/Liver_colData_Endpoints.csv", package = "RnaSeqAnalysis"))
annotationData <- AnnotateCounts(counts, species = "Mouse", key.type = "ENSEMBL",
multiVals = "first")
dds <- DESeqDataSetFromMatrix(counts, coldata, design = ~1)
dds <- estimateSizeFactors(dds)
counts(dds, normalized = TRUE)
save(dds, file = "inst/ExampleData/Liver_DDS.RData")
devtools::install()
citations("DT")
citation("DT")
knitr::opts_chunk$set(echo = params$echo)
library(DT)
library(RnaSeqAnalysis)
library(DESeq2)
# Default example data
dds.file <- ifelse(params$dds == "NA",
system.file("ExampleData/Liver_DDS.RData", package = "RnaSeqAnalysis"),
params$dds)
ShowDataTable(data.frame(counts(dds))[1:100,])
ShowDataTable <- function(df) {
DT::datatable(df,
class   = 'cell-border stripe compact hover',
escape  = F, selection = 'multiple',
extensions = "Scroller",
filter = "top",
options = list(
scrollY = "60vh",
scroller = TRUE,
deferRender = TRUE,
scrollX = TRUE,
autoWidth  = T,
columnDefs = list(list(
targets  = 1:ncol(df),
render   = JS(
"function(data, type, row, meta) {",
"return type === 'display' && data.length > 50 ?",
"'<span title=\"' + data + '\">' +
data.substr(0, 50) + '...</span>' : data;", "}"))),
paging = TRUE, server = T)
)
}
ShowDataTable(data.frame(counts(dds))[1:100,])
knitr::opts_chunk$set(echo = params$echo)
library(DT)
library(RnaSeqAnalysis)
library(DESeq2)
# Default example data
dds.file <- ifelse(params$dds == "NA",
system.file("ExampleData/Liver_DDS.RData", package = "RnaSeqAnalysis"),
params$dds)
# Cache creation and computation of DESeqDataSet?
#   Estimating disperions and the VST may take a while.
load(dds.file) # Loads "dds" into the environment
vst.included <- !is.null(mcols(dds)$vst)
dds
# So this datatable needs a ton of options to display nicely
#   The contents are more important!
DT::datatable(data.frame(colData(dds)),
class   = 'cell-border stripe compact hover',
escape  = F, selection = 'multiple',
extensions = "Scroller",
filter = "top",
options = list(
scrollY = "60vh",
scroller = TRUE,
deferRender = TRUE,
scrollX = TRUE,
autoWidth  = T,
columnDefs = list(list(
targets  = 1:ncol(data.frame(colData(dds))),
render   = JS(
"function(data, type, row, meta) {",
"return type === 'display' && data.length > 50 ?",
"'<span title=\"' + data + '\">' +
data.substr(0, 50) + '...</span>' : data;", "}"))),
paging = TRUE, server = T)
)
# ShowDataTable(data.frame(colData(dds)))
data.frame(colData(dds)
)
DT::datatable(data.frame(colData(dds)),
class   = 'cell-border stripe compact hover',
escape  = F, selection = 'multiple',
extensions = "Scroller",
filter = "top",
options = list(
scrollY = "60vh",
scroller = TRUE,
deferRender = TRUE,
scrollX = TRUE,
autoWidth  = T,
columnDefs = list(list(
targets  = 1:ncol(data.frame(colData(dds))),
render   = JS(
"function(data, type, row, meta) {",
"return type === 'display' && data.length > 50 ?",
"'<span title=\"' + data + '\">' +
data.substr(0, 50) + '...</span>' : data;", "}"))),
paging = TRUE, server = T)
)
DT::datatable(data.frame(colData(dds)),
class   = 'cell-border stripe compact hover',
escape  = F, selection = 'multiple',
extensions = "Scroller",
filter = "top",
options = list(
scrollY = "60vh",
scroller = TRUE,
deferRender = TRUE,
scrollX = TRUE,
autoWidth  = T,
paging = TRUE, server = T)
)
knit_with_parameters('~/GitLab/DataScience-MSB/Pipelines/RnaSeqAnalysis/inst/ReportSections/RnaSeq-Data-Input.Rmd')
setwd("~/GitLab/DataScience-MSB/Pipelines/RnaSeqAnalysis/inst/ReportSections")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()

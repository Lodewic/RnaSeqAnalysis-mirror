library(ggplot2)
sessionI
sessionInfo()
libray(DESeq2)
library(DESeq2)
# One PhenoDb package
library(PhenoDb)
#authentication procedure
setPhenotypeDatabaseBaseUrl("https://dashin.eu/interventionstudies/api/")
user = "lodewic.vantwillert"
skey = "25c92be1-234b-4b44-8c94-f94bb4cd7326"
authenticate(user, paste(readline()), skey)
#get available studies & select specific study
#   match either by code or title
#   One or the other must be NULL (or not passed to getStudyToken())
studyTitle <- NULL     # Set part of the study title to match with grep()
studyCode <- "9218_Fat_challenge_tests"   # OR part of the study code
# Gather all study data tokens
studies = getStudies()
studyToken <- getStudyToken(studies, code = studyCode, title = studyTitle)
assays = getAssaysForStudy(studyToken)
# Get all study data in data.frames
studiesDf <- studiesToDataframe(studies)
studyFeatures <- getFeaturesDataframe(assays, format = "long")
studySubjects <- getSubjectsDataframe(assays)
# This part is the same as getAssaysDataframe()
# Except that we split it up to keep the assays in a list to check for character
# values
studyAssaysList <- getAssaysList(assays)
allCharactersTable <- findCharacters(studyAssaysList) # All character values in a table
studyAssays <- assaysList2Dataframe(assays, studyAssaysList)
# Summarise values by group
#   Simple statistics like the mean, quantiles, standard deviation etc.
summaryGroups <- c("Variable", "Assay", "Condition", "AbsTime", "RelTime")
assaysSummary <- summariseAssays(studyAssays, summaryGroups = summaryGroups)
# Nested data per group for further analysis:)
nestGroups <- c("Variable", "Assay")
assayNest <- nestAssays(studyAssays, summaryGroups = nestGroups) %>%
mutate(PlotTitle = paste0(vars(nestGroups), sep = ", "))
# Function to map boxplot
mapBoxplot <- function(df, title,
plotCols = list(x = "RelTime",
y = "Value",
color = "RelTime",
facet1 = "AbsTime",
facet2 = "Condition")) {
gg <- ggplot(df, aes(x = RelTime, y = Value, color = RelTime)) +
geom_boxplot()
if (length(unique(df$Condition)) > 1) {
gg <- gg + facet_grid(. ~ Condition)
}
return(gg)
}
# Plots from nested data
#   The resulting dataframe will eat up your memory since it stores plots
#   for every group. Consider filtering uninteresting entries before plotting:)
assayPlots <- assayNest %>%
# filter(some condition...) %>%
mutate(Boxplot = map2(data, Variable, ~ mapBoxplot(df = .x, title = .y,
plotCols = list(x = "RelTime",
y = "Value",
color = "RelTime",
facet1 = "AbsTime",
facet2 = "Condition"))))
# One PhenoDb package
library(PhenoDb)
#authentication procedure
setPhenotypeDatabaseBaseUrl("https://dashin.eu/interventionstudies/api/")
user = "lodewic.vantwillert"
skey = "25c92be1-234b-4b44-8c94-f94bb4cd7326"
authenticate(user, paste(readline()), skey)
#   One or the other must be NULL (or not passed to getStudyToken())
studyTitle <- NULL     # Set part of the study title to match with grep()
studyCode <- "9218_Fat_challenge_tests"   # OR part of the study code
# Gather all study data tokens
studies = getStudies()
studyToken <- getStudyToken(studies, code = studyCode, title = studyTitle)
assays = getAssaysForStudy(studyToken)
# Get all study data in data.frames
studiesDf <- studiesToDataframe(studies)
studyFeatures <- getFeaturesDataframe(assays, format = "long")
studySubjects <- getSubjectsDataframe(assays)
# This part is the same as getAssaysDataframe()
# Except that we split it up to keep the assays in a list to check for character
# values
studyAssaysList <- getAssaysList(assays)
allCharactersTable <- findCharacters(studyAssaysList) # All character values in a table
studyAssays <- assaysList2Dataframe(assays, studyAssaysList)
# Summarise values by group
#   Simple statistics like the mean, quantiles, standard deviation etc.
summaryGroups <- c("Variable", "Assay", "Condition", "AbsTime", "RelTime")
assaysSummary <- summariseAssays(studyAssays, summaryGroups = summaryGroups)
# Nested data per group for further analysis:)
nestGroups <- c("Variable", "Assay")
assayNest <- nestAssays(studyAssays, summaryGroups = nestGroups) %>%
mutate(PlotTitle = paste0(vars(nestGroups), sep = ", "))
# Function to map boxplot
mapBoxplot <- function(df, title,
plotCols = list(x = "RelTime",
y = "Value",
color = "RelTime",
facet1 = "AbsTime",
facet2 = "Condition")) {
gg <- ggplot(df, aes(x = RelTime, y = Value, color = RelTime)) +
geom_boxplot()
if (length(unique(df$Condition)) > 1) {
gg <- gg + facet_grid(. ~ Condition)
}
return(gg)
}
# Plots from nested data
#   The resulting dataframe will eat up your memory since it stores plots
#   for every group. Consider filtering uninteresting entries before plotting:)
assayPlots <- assayNest %>%
# filter(some condition...) %>%
mutate(Boxplot = map2(data, Variable, ~ mapBoxplot(df = .x, title = .y,
plotCols = list(x = "RelTime",
y = "Value",
color = "RelTime",
facet1 = "AbsTime",
facet2 = "Condition"))))
assayPlots$Boxplot[[1]]
assayPlots$Boxplot[[4]]
map(assayNest$data, length(unique(.x$Condition)))
map(assayNest$data, ~ length(unique(.x$Condition)))
assayPlots$Boxplot[[8]]
View(assayPlots)
assayPlots$Boxplot[[6]]
assayPlots$Boxplot[[8]]
assayPlots$Boxplot[[9]]
# Function to map boxplot
mapBoxplot <- function(df, title,
plotCols = list(x = "RelTime",
y = "Value",
color = "RelTime",
facet1 = "AbsTime",
facet2 = "Condition")) {
gg <- ggplot(df, aes(x = RelTime, y = Value, color = RelTime)) +
geom_boxplot() + ggtitle(title)
if (length(unique(df$Condition)) > 1) {
gg <- gg + facet_grid(. ~ Condition)
}
return(gg)
}
# Plots from nested data
#   The resulting dataframe will eat up your memory since it stores plots
#   for every group. Consider filtering uninteresting entries before plotting:)
assayPlots <- assayNest %>%
# filter(some condition...) %>%
mutate(Boxplot = map2(data, Variable, ~ mapBoxplot(df = .x, title = .y,
plotCols = list(x = "RelTime",
y = "Value",
color = "RelTime",
facet1 = "AbsTime",
facet2 = "Condition"))))
assayPlots$Boxplot[[9]]
df.waist <- assayPlots$data[[9]]
View(df.waist)
df.waist %>% group_by(RelTime) %>% tally()
df.waist %>% group_by(Subject) %>% tally()
df.waist %>% group_by(Subject, RelTime) %>% tally()
source("https://bioconductor.org/biocLite.R")
biocLite("RGalaxy")
library(RGalaxy)
?RGalaxy
?RGalaxy::galaxy
devtools::install_github("Lodewic/RnaSeqAnalysis-mirror")
install_github("Lodewic/RnaSeqAnalysis-mirror")
library(devtools)
install_github("Lodewic/RnaSeqAnalysis-mirror")
setwd("~/GitLab/DataScience-MSB/Pipelines/RnaSeqAnalysis")
devtools::build()
devtools::build(".")
devtools::build(path = ".")
devtools::build(path = ".")
devtools::build(path = ".")
?build
devtools::build()
devtools::build()
install_github("Lodewic/RnaSeqAnalysis-mirror")

my_filters <- drake_plan(
filter = deseq_gene_filter(dataset__, flist = filter_pack1)) %>%
plan_analyses(datasets = my_datasets)
# Make a report
my_report <- drake_plan(
SummaryReport.html = {
SFT_Reports_Aorta.html = rmarkdown:::render(
input = 'SummaryReport.Rmd',
# 'Training1_Out/Report.Rmd', #nolint: use single quotes to specify file dependency.
# output_file = "SummaryReport.html",
knit_root_dir = getwd()
)
}, file_targets = TRUE
)
# Create the plan by binding the plan data.frames together with a simple rbind()
my_plan <- rbind(my_datasets, my_filters, my_report)
# vis_drake_graph(config) # plots an interactive web app via visNetwork. #nolint optional
workflow_graph <- build_drake_graph(my_plan) # igraph object
# Check for circularities, missing input files, etc.
check_plan(my_plan)
# Get a drake config list so you can use
# other utility functions
config <- drake_config(my_plan, verbose = FALSE)
# All the targets in the plan are "outdated" because we have not made them yet.
outdated(config)
# vis_drake_graph(my_plan) # Show how the pieces of your workflow are connected #nolint: optional
missed(config) # Nothing should be missing from your workspace.
#
drake_graph(config)
# Run your project.
config <- make(my_plan) # Return an updated config list
drake_graph(config, targets_only = T)
config <- make(my_plan) # Return an updated config list
ddsAorta
ddsData_Aorta
drake_graph(config, targets_only = T)
config <- make(my_plan) # Return an updated config list
drake_graph(config, targets_only = T)
check_plan(my_plan)
visNetwork::visIgraph(workflow_graph)
visNetwork::visIgraph(workflow_graph, physics = TRUE)
visNetwork::visIgraph(workflow_graph, smooth = TRUE)
# DrakeExample
###### SETup WORKSPACE ########
# Load required libraries
library(drake)
library(tidyverse) # Always import tidyverse:)
library(DESeq2)
library(genefilter)
# Source other functions
for (f in dir("../../R")) if(endsWith(tolower(f), ".r")) source(file.path("../../R", f))
#### Variable options for pipeline #####
# Set input data options
#   Two stes of countdata + sample data
COUNTFILE <- c("ExampleData/Aorta_Counts.csv",
"ExampleData/Liver_Counts.csv")
COLDATAFILE <- c("ExampleData/Aorta_colData_Endpoints.csv",
"ExampleData/Aorta_colData_Endpoints.csv")
# We're using file dependencies, so we wrap file dependencies in single quotes
COUNTFILE <- WrapQuote(COUNTFILE)
COLDATAFILE <- WrapQuote(COLDATAFILE)
# Using "NULL" as a string is a little awkward for now but string get unquoted using evaluate_plan() so the result is just the value NULL.
ANNOTATIONFILE <- c("NULL", "NULL")
# Give the species and keytype of the gene expression data
#   And wrap them in double quotes since we want these to stay literal string values
SPECIES <- c("Mouse", "Mouse")
KEYTYPE <- c("ENSEMBL", "ENSEMBL")
SPECIES <- WrapQuoteDbl(SPECIES)
KEYTYPE <- WrapQuoteDbl(KEYTYPE)
# List of rules
dataset_rules <- list(COUNTFILE=COUNTFILE,
COLDATAFILE=COLDATAFILE,
ANNOTATIONFILE=ANNOTATIONFILE,
SPECIES=SPECIES,
KEYTYPE=KEYTYPE)
# Set descriptive short names of the different datasets
data_names <- c("Aorta", "Liver")
#### Set filter options ####
# General gene filter pack
intensity_filter      <- function(x) { gene_filter_intensity(x, cutoff = 50) }
variance_filter       <- function(x) { gene_filter_quantile(x, cutoff = 200)}
prevalence_filter     <- function(x) { gene_filter_prevalence(x)}
filter_pack1          <- list(intensity_filter,variance_filter,prevalence_filter)
### Create drake plan ####
### Add datasets ####
my_datasets <- drake_plan(
ddsData = getData(COUNTFILE, COLDATAFILE, ANNOTATIONFILE, SPECIES, KEYTYPE)) %>%
# Expand multiple to use vectors of wildcard replacements together
expandMultiple(plan = ., rules_list = dataset_rules, names_list = data_names)
# Filter data
my_filters <- drake_plan(
filter = deseq_gene_filter(dataset__, flist = filter_pack1)) %>%
plan_analyses(datasets = my_datasets)
# Make a report
my_report <- drake_plan(
SummaryReport.html = {
SFT_Reports_Aorta.html = rmarkdown:::render(
input = 'SummaryReport.Rmd',
# 'Training1_Out/Report.Rmd', #nolint: use single quotes to specify file dependency.
# output_file = "SummaryReport.html",
knit_root_dir = getwd()
)
}, file_targets = TRUE
)
# Create the plan by binding the plan data.frames together with a simple rbind()
my_plan <- rbind(my_datasets, my_filters, my_report)
# vis_drake_graph(config) # plots an interactive web app via visNetwork. #nolint optional
workflow_graph <- build_drake_graph(my_plan) # igraph object
# Check for circularities, missing input files, etc.
#   We often use strings in commands but this will raise a warning , but that's expected.
check_plan(my_plan)
# Get a drake config list so you can use
# other utility functions
config <- drake_config(my_plan, verbose = FALSE)
# All the targets in the plan are "outdated" because we have not made them yet.
outdated(config)
# vis_drake_graph(my_plan) # Show how the pieces of your workflow are connected #nolint: optional
missed(config) # Nothing should be missing from your workspace.
#
drake_graph(config)
setwd("C:/Users/twillerthtlv/GitLab/DataScience-MSB/Pipelines/DESeq2Pipeline/inst/drake_examples")
drake_graph(config, targets_only = T)
library(AnnotationDbi)
library(tidyverse) # Always import tidyverse:)
# DrakeExample
###### SETup WORKSPACE ########
# Load required libraries
library(AnnotationDbi)
library(drake)
library(tidyverse) # Always import tidyverse:)
library(DESeq2)
library(genefilter)
# Source other functions
for (f in dir("../../R")) if(endsWith(tolower(f), ".r")) source(file.path("../../R", f))
#### Variable options for pipeline #####
# Set input data options
#   Two stes of countdata + sample data
COUNTFILE <- c("ExampleData/Aorta_Counts.csv",
"ExampleData/Liver_Counts.csv")
COLDATAFILE <- c("ExampleData/Aorta_colData_Endpoints.csv",
"ExampleData/Aorta_colData_Endpoints.csv")
# We're using file dependencies, so we wrap file dependencies in single quotes
COUNTFILE <- WrapQuote(COUNTFILE)
COLDATAFILE <- WrapQuote(COLDATAFILE)
# Using "NULL" as a string is a little awkward for now but string get unquoted using evaluate_plan() so the result is just the value NULL.
ANNOTATIONFILE <- c("NULL", "NULL")
# Give the species and keytype of the gene expression data
#   And wrap them in double quotes since we want these to stay literal string values
SPECIES <- c("Mouse", "Mouse")
KEYTYPE <- c("ENSEMBL", "ENSEMBL")
SPECIES <- WrapQuoteDbl(SPECIES)
KEYTYPE <- WrapQuoteDbl(KEYTYPE)
# List of rules
dataset_rules <- list(COUNTFILE=COUNTFILE,
COLDATAFILE=COLDATAFILE,
ANNOTATIONFILE=ANNOTATIONFILE,
SPECIES=SPECIES,
KEYTYPE=KEYTYPE)
# Set descriptive short names of the different datasets
data_names <- c("Aorta", "Liver")
#### Set filter options ####
# General gene filter pack
intensity_filter      <- function(x) { gene_filter_intensity(x, cutoff = 50) }
variance_filter       <- function(x) { gene_filter_quantile(x, cutoff = 200)}
prevalence_filter     <- function(x) { gene_filter_prevalence(x)}
filter_pack1          <- list(intensity_filter,variance_filter,prevalence_filter)
### Create drake plan ####
### Add datasets ####
my_datasets <- drake_plan(
ddsData = getData(COUNTFILE, COLDATAFILE, ANNOTATIONFILE, SPECIES, KEYTYPE)) %>%
# Expand multiple to use vectors of wildcard replacements together
expandMultiple(plan = ., rules_list = dataset_rules, names_list = data_names)
# Filter data
my_filters <- drake_plan(
filter = deseq_gene_filter(dataset__, flist = filter_pack1)) %>%
plan_analyses(datasets = my_datasets)
# Make a report
my_report <- drake_plan(
SummaryReport.html = {
SFT_Reports_Aorta.html = rmarkdown:::render(
input = 'SummaryReport.Rmd',
# 'Training1_Out/Report.Rmd', #nolint: use single quotes to specify file dependency.
# output_file = "SummaryReport.html",
knit_root_dir = getwd()
)
}, file_targets = TRUE
)
# Create the plan by binding the plan data.frames together with a simple rbind()
my_plan <- rbind(my_datasets, my_filters, my_report)
# vis_drake_graph(config) # plots an interactive web app via visNetwork. #nolint optional
workflow_graph <- build_drake_graph(my_plan) # igraph object
# Check for circularities, missing input files, etc.
#   We often use strings in commands but this will raise a warning , but that's expected.
check_plan(my_plan)
# Get a drake config list so you can use
# other utility functions
config <- drake_config(my_plan, verbose = FALSE)
# All the targets in the plan are "outdated" because we have not made them yet.
outdated(config)
# vis_drake_graph(my_plan) # Show how the pieces of your workflow are connected #nolint: optional
missed(config) # Nothing should be missing from your workspace.
#
drake_graph(config, targets_only = T)
# Run your project.
config <- make(my_plan) # Return an updated config list
drake_graph(config, targets_only = T)
drake_graph(config, targets_only = T)
outdated(config)
missed(config) # Nothing should be missing from your workspace.
drake_graph(config, targets_only = T)
config <- make(my_plan) # Return an updated config list
drake_graph(config, targets_only = T)
drake_graph(config, targets_only = T)
# DrakeExample
###### SETup WORKSPACE ########
# Load required libraries
library(AnnotationDbi)
library(drake)
library(tidyverse) # Always import tidyverse:)
library(DESeq2)
library(genefilter)
# Source other functions
for (f in dir("../../R")) if(endsWith(tolower(f), ".r")) source(file.path("../../R", f))
########
######## Variable options for pipeline #####
########  Setting the data file input
# Set input data options
#   Two stes of countdata + sample data
COUNTFILE <- c("ExampleData/Aorta_Counts.csv",
"ExampleData/Liver_Counts.csv")
COLDATAFILE <- c("ExampleData/Aorta_colData_Endpoints.csv",
"ExampleData/Aorta_colData_Endpoints.csv")
# We're using file dependencies, so we wrap file dependencies in single quotes
COUNTFILE <- WrapQuote(COUNTFILE)
COLDATAFILE <- WrapQuote(COLDATAFILE)
# Using "NULL" as a string is a little awkward for now but string get unquoted using evaluate_plan() so the result is just the value NULL.
ANNOTATIONFILE <- c("NULL", "NULL")
# Give the species and keytype of the gene expression data
#   And wrap them in double quotes since we want these to stay literal string values
SPECIES <- c("Mouse", "Mouse")
KEYTYPE <- c("ENSEMBL", "ENSEMBL")
SPECIES <- WrapQuoteDbl(SPECIES)
KEYTYPE <- WrapQuoteDbl(KEYTYPE)
# List of rules
dataset_rules <- list(COUNTFILE=COUNTFILE,
COLDATAFILE=COLDATAFILE,
ANNOTATIONFILE=ANNOTATIONFILE,
SPECIES=SPECIES,
KEYTYPE=KEYTYPE)
# Set descriptive short names of the different datasets
data_names <- c("Aorta", "Liver")
########
######## Set filter options ####
########
# General gene filter pack
intensity_filter      <- function(x) { gene_filter_intensity(x, cutoff = 50) }
variance_filter       <- function(x) { gene_filter_quantile(x, cutoff = 200)}
prevalence_filter     <- function(x) { gene_filter_prevalence(x)}
filter_pack1          <- list(intensity_filter,variance_filter,prevalence_filter)
########
########  Create drake plan ####
########
### Add datasets ####
###   drake_plan() returns a dataframe so we can use the piping operator %>% here
# Use expandMultiple() to use the dataset_rules, a named list of vectors, to replace the wildcards
#   The wildcards are the ALLCAPS VARIABLES below
my_datasets <- drake_plan(
ddsData = getData(COUNTFILE, COLDATAFILE, ANNOTATIONFILE, SPECIES, KEYTYPE)) %>%
# Expand multiple to use vectors of wildcard replacements together
expandMultiple(rules_list = dataset_rules, names_list = data_names)
# Filter data
#   plan_analyses() has the option to set datasets- this automatically replaces and expands all dataset__ wildcards in the commands
#   So dataset__ is replaced with ddsData_Aorta and ddsData_Liver respectively (the targets of my_datasets, made above)
my_filters <- drake_plan(
filter = deseq_gene_filter(dataset__, flist = filter_pack1)) %>%
plan_analyses(datasets = my_datasets)
# Make a report
#   Make dependency on .Rmd file and the output .html file
#   Whenever render() or knit() etc is used, the input .Rmd file is checked for dependencies on pipeline outputs
#     These are recognized by being wrapped in the loadd() or readd() function in the .Rmd file:)
my_report <- drake_plan(
SummaryReport.html = {
SFT_Reports_Aorta.html = rmarkdown:::render(
input = 'SummaryReport.Rmd',
# 'Training1_Out/Report.Rmd', #nolint: use single quotes to specify file dependency.
# output_file = "SummaryReport.html",
knit_root_dir = getwd()
)
}, file_targets = TRUE
)
# Create the plan by binding the plan data.frames together with a simple rbind()
my_plan <- rbind(my_datasets, my_filters, my_report)
########
######## DIAGNOSE DRAKE PLAN ########
########
# vis_drake_graph(config) # plots an interactive web app via visNetwork. #nolint optional
workflow_graph <- build_drake_graph(my_plan) # igraph object
# Check for circularities, missing input files, etc.
#   We often use strings in commands but this will raise a warning , but that's expected.
check_plan(my_plan)
# Get a drake config list so you can use
# other utility functions
config <- drake_config(my_plan, verbose = FALSE)
# All the targets in the plan are "outdated" because we have not made them yet.
outdated(config)
# vis_drake_graph(my_plan) # Show how the pieces of your workflow are connected #nolint: optional
missed(config) # Nothing should be missing from your workspace.
#
drake_graph(config, targets_only = T)
config <- make(my_plan) # Return an updated config list
drake_graph(config, targets_only = T)
readd(filter_ddsData_Aorta)
drake_graph(config, targets_only = T)
?drake_graph
config <- drake_config(my_plan, verbose = FALSE)
drake_graph(config, targets_only = T)
# DrakeExample
###### SETup WORKSPACE ########
# Load required libraries
library(AnnotationDbi)
library(drake)
library(tidyverse) # Always import tidyverse:)
library(DESeq2)
library(genefilter)
# Source other functions
# for (f in dir("../../R")) if(endsWith(tolower(f), ".r")) source(file.path("../../R", f))
########
######## Variable options for pipeline #####
########  Setting the data file input
# Set input data options
#   Two stes of countdata + sample data
COUNTFILE <- c("ExampleData/Aorta_Counts.csv",
"ExampleData/Liver_Counts.csv")
COLDATAFILE <- c("ExampleData/Aorta_colData_Endpoints.csv",
"ExampleData/Aorta_colData_Endpoints.csv")
# We're using file dependencies, so we wrap file dependencies in single quotes
COUNTFILE <- WrapQuote(COUNTFILE)
COLDATAFILE <- WrapQuote(COLDATAFILE)
# Using "NULL" as a string is a little awkward for now but string get unquoted using evaluate_plan() so the result is just the value NULL.
ANNOTATIONFILE <- c("NULL", "NULL")
# Give the species and keytype of the gene expression data
#   And wrap them in double quotes since we want these to stay literal string values
SPECIES <- c("Mouse", "Mouse")
KEYTYPE <- c("ENSEMBL", "ENSEMBL")
SPECIES <- WrapQuoteDbl(SPECIES)
KEYTYPE <- WrapQuoteDbl(KEYTYPE)
# List of rules
dataset_rules <- list(COUNTFILE=COUNTFILE,
COLDATAFILE=COLDATAFILE,
ANNOTATIONFILE=ANNOTATIONFILE,
SPECIES=SPECIES,
KEYTYPE=KEYTYPE)
# Set descriptive short names of the different datasets
data_names <- c("Aorta", "Liver")
########
######## Set filter options ####
########
# General gene filter pack
intensity_filter      <- function(x) { gene_filter_intensity(x, cutoff = 50) }
variance_filter       <- function(x) { gene_filter_quantile(x, cutoff = 200)}
prevalence_filter     <- function(x) { gene_filter_prevalence(x)}
filter_pack1          <- list(intensity_filter,variance_filter,prevalence_filter)
########
########  Create drake plan ####
########
### Add datasets ####
###   drake_plan() returns a dataframe so we can use the piping operator %>% here
# Use expandMultiple() to use the dataset_rules, a named list of vectors, to replace the wildcards
#   The wildcards are the ALLCAPS VARIABLES below
my_datasets <- drake_plan(
ddsData = getData(COUNTFILE, COLDATAFILE, ANNOTATIONFILE, SPECIES, KEYTYPE)) %>%
# Expand multiple to use vectors of wildcard replacements together
expandMultiple(rules_list = dataset_rules, names_list = data_names)
# Filter data
#   plan_analyses() has the option to set datasets- this automatically replaces and expands all dataset__ wildcards in the commands
#   So dataset__ is replaced with ddsData_Aorta and ddsData_Liver respectively (the targets of my_datasets, made above)
my_filters <- drake_plan(
filter = deseq_gene_filter(dataset__, flist = filter_pack1)) %>%
plan_analyses(datasets = my_datasets)
# Make a report
#   Make dependency on .Rmd file and the output .html file
#   Whenever render() or knit() etc is used, the input .Rmd file is checked for dependencies on pipeline outputs
#     These are recognized by being wrapped in the loadd() or readd() function in the .Rmd file:)
my_report <- drake_plan(
SummaryReport.html = {
SFT_Reports_Aorta.html = rmarkdown:::render(
input = 'SummaryReport.Rmd',
# 'Training1_Out/Report.Rmd', #nolint: use single quotes to specify file dependency.
# output_file = "SummaryReport.html",
knit_root_dir = getwd()
)
}, file_targets = TRUE
)
# Create the plan by binding the plan data.frames together with a simple rbind()
my_plan <- rbind(my_datasets, my_filters, my_report)
########
######## DIAGNOSE DRAKE PLAN ########
########
# vis_drake_graph(config) # plots an interactive web app via visNetwork. #nolint optional
workflow_graph <- build_drake_graph(my_plan) # igraph object
# Check for circularities, missing input files, etc.
#   We often use strings in commands but this will raise a warning , but that's expected.
check_plan(my_plan)
# Get a drake config list so you can use
# other utility functions
config <- drake_config(my_plan, verbose = FALSE)
# All the targets in the plan are "outdated" because we have not made them yet.
outdated(config)
# vis_drake_graph(my_plan) # Show how the pieces of your workflow are connected #nolint: optional
missed(config) # Nothing should be missing from your workspace.
#
drake_graph(config, targets_only = T)
# Run your project.
config <- make(my_plan) # Return an updated config list
for (f in dir("../../R")) if(endsWith(tolower(f), ".r")) source(file.path("../../R", f))
drake_graph(config, targets_only = T)
# DrakeExample
###### SETup WORKSPACE ########
# Load required libraries
library(AnnotationDbi)
library(drake)
library(tidyverse) # Always import tidyverse:)
library(DESeq2)
library(genefilter)
# Source other functions
# for (f in dir("../../R")) if(endsWith(tolower(f), ".r")) source(file.path("../../R", f))
########
######## Variable options for pipeline #####
########  Setting the data file input
# Set input data options
#   Two stes of countdata + sample data
COUNTFILE <- c("ExampleData/Aorta_Counts.csv",
"ExampleData/Liver_Counts.csv")
COLDATAFILE <- c("ExampleData/Aorta_colData_Endpoints.csv",
"ExampleData/Aorta_colData_Endpoints.csv")
# We're using file dependencies, so we wrap file dependencies in single quotes
COUNTFILE <- WrapQuote(COUNTFILE)
COLDATAFILE <- WrapQuote(COLDATAFILE)
# Using "NULL" as a string is a little awkward for now but string get unquoted using evaluate_plan() so the result is just the value NULL.
ANNOTATIONFILE <- c("NULL", "NULL")
# Give the species and keytype of the gene expression data
#   And wrap them in double quotes since we want these to stay literal string values
SPECIES <- c("Mouse", "Mouse")
KEYTYPE <- c("ENSEMBL", "ENSEMBL")
SPECIES <- WrapQuoteDbl(SPECIES)
KEYTYPE <- WrapQuoteDbl(KEYTYPE)
# List of rules
dataset_rules <- list(COUNTFILE=COUNTFILE,
COLDATAFILE=COLDATAFILE,
ANNOTATIONFILE=ANNOTATIONFILE,
SPECIES=SPECIES,
KEYTYPE=KEYTYPE)
# Set descriptive short names of the different datasets
data_names <- c("Aorta", "Liver")
########
######## Set filter options ####
########
# General gene filter pack
intensity_filter      <- function(x) { gene_filter_intensity(x, cutoff = 50) }
variance_filter       <- function(x) { gene_filter_quantile(x, cutoff = 200)}
prevalence_filter     <- function(x) { gene_filter_prevalence(x)}
filter_pack1          <- list(intensity_filter,variance_filter,prevalence_filter)
########
########  Create drake plan ####
########
### Add datasets ####
###   drake_plan() returns a dataframe so we can use the piping operator %>% here
# Use expandMultiple() to use the dataset_rules, a named list of vectors, to replace the wildcards
#   The wildcards are the ALLCAPS VARIABLES below
my_datasets <- drake_plan(
ddsData = getData(COUNTFILE, COLDATAFILE, ANNOTATIONFILE, SPECIES, KEYTYPE)) %>%
# Expand multiple to use vectors of wildcard replacements together
expandMultiple(rules_list = dataset_rules, names_list = data_names)
# Filter data
#   plan_analyses() has the option to set datasets- this automatically replaces and expands all dataset__ wildcards in the commands
#   So dataset__ is replaced with ddsData_Aorta and ddsData_Liver respectively (the targets of my_datasets, made above)
my_filters <- drake_plan(
filter = deseq_gene_filter(dataset__, flist = filter_pack1)) %>%
plan_analyses(datasets = my_datasets)
# Make a report
#   Make dependency on .Rmd file and the output .html file
#   Whenever render() or knit() etc is used, the input .Rmd file is checked for dependencies on pipeline outputs
#     These are recognized by being wrapped in the loadd() or readd() function in the .Rmd file:)
my_report <- drake_plan(
SummaryReport.html = {
SFT_Reports_Aorta.html = rmarkdown:::render(
input = 'SummaryReport.Rmd',
# 'Training1_Out/Report.Rmd', #nolint: use single quotes to specify file dependency.
# output_file = "SummaryReport.html",
knit_root_dir = getwd()
)
}, file_targets = TRUE
)
# Create the plan by binding the plan data.frames together with a simple rbind()
my_plan <- rbind(my_datasets, my_filters, my_report)
########
######## DIAGNOSE DRAKE PLAN ########
########
# vis_drake_graph(config) # plots an interactive web app via visNetwork. #nolint optional
workflow_graph <- build_drake_graph(my_plan) # igraph object
# Check for circularities, missing input files, etc.
#   We often use strings in commands but this will raise a warning , but that's expected.
check_plan(my_plan)
# Get a drake config list so you can use
# other utility functions
config <- drake_config(my_plan, verbose = FALSE)
# All the targets in the plan are "outdated" because we have not made them yet.
outdated(config)
# vis_drake_graph(my_plan) # Show how the pieces of your workflow are connected #nolint: optional
missed(config) # Nothing should be missing from your workspace.
#
drake_graph(config, targets_only = T)
